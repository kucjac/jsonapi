package query

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/neuronlabs/neuron/config"
	"github.com/neuronlabs/neuron/mapping"
	"github.com/neuronlabs/neuron/repository"
)

const (
	repoName = "mockery"
)

func init() {
	if err := repository.RegisterFactory(&Factory{}); err != nil {
		panic(err)
	}
}

/**

Factory

*/

// Factory is the repository.Factory mock implementation
type Factory struct {
	mock.Mock
}

// New creates new repository
// Implements repository.Factory method
func (f *Factory) New(*config.Repository) (repository.Repository, error) {
	return &Repository{}, nil
}

// DriverName returns the factory repository name
// Implements repository.Repository
func (f *Factory) DriverName() string {
	return repoName
}

/**

Repository

*/

// compile time check for the Transactioner interface.
var (
	_ Transactioner  = &Repository{}
	_ FullRepository = &Repository{}
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Begin provides a mock function with given fields: TransactionCtx, s
func (_m *Repository) Begin(ctx context.Context, tx *Tx) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Tx) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Close closes the repository connection
func (_m *Repository) Close(context.Context) error {
	return nil
}

// Commit provides a mock function with given fields: TransactionCtx, s
func (_m *Repository) Commit(ctx context.Context, tx *Tx) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Tx) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields: TransactionCtx, s
func (_m *Repository) Count(ctx context.Context, s *Scope) (int64, error) {
	ret := _m.Called(ctx, s)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *Scope) int64); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Scope) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields: TransactionCtx, s
func (_m *Repository) Exists(ctx context.Context, s *Scope) (bool, error) {
	ret := _m.Called(ctx, s)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *Scope) bool); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Scope) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: TransactionCtx, s
func (_m *Repository) Insert(ctx context.Context, s *Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Dial implements repository.Repository
func (_m *Repository) Dial(context.Context) error {
	return nil
}

// Delete provides a mock function with given fields: TransactionCtx, s
func (_m *Repository) Delete(ctx context.Context, s *Scope) (int64, error) {
	ret := _m.Called(ctx, s)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *Scope) int64); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Scope) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheck implements repository.Repository.
func (_m *Repository) HealthCheck(context.Context) (*repository.HealthResponse, error) {
	return &repository.HealthResponse{Status: repository.StatusPass}, nil
}

// ID implements repository.Repository interface.
func (_m *Repository) ID() string {
	return "mock"
}

// Find provides a mock function with given fields: TransactionCtx, s
func (_m *Repository) Find(ctx context.Context, s *Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: TransactionCtx, s
func (_m *Repository) Update(ctx context.Context, s *Scope) (int64, error) {
	ret := _m.Called(ctx, s)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *Scope) int64); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Scope) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterModels implements repository.Repository interface.
func (_m *Repository) RegisterModels(...*mapping.ModelStruct) error {
	return nil
}

// Rollback provides a mock function with given fields: TransactionCtx, s
func (_m *Repository) Rollback(ctx context.Context, tx *Tx) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Tx) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FactoryName provides a mock function that implements FactoryName method.
func (_m *Repository) FactoryName() string {
	return repoName
}

// func clearRepository(repo *Repository) {
// 	repo.Calls = []mock.Call{}
// 	repo.ExpectedCalls = []*mock.Call{}
// }
