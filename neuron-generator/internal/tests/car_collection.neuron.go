// Code generated by neuron-generator. DO NOT EDIT.
// This file was generated at:
// Wed, 13 May 2020 12:22:52 +0200

package tests

import (
	"context"

	"github.com/neuronlabs/neuron/controller"
	"github.com/neuronlabs/neuron/errors"
	"github.com/neuronlabs/neuron/mapping"
	"github.com/neuronlabs/neuron/query"
)

func init() {
	_collectionInitializers = append(_collectionInitializers, initializeCars)
}

// Cars is the collection used to query Car model.
var Cars *cars

type cars struct {
	Model *mapping.ModelStruct
}

func initializeCars() error {
	mStruct, err := controller.ModelStruct(&Car{})
	if err != nil {
		return err
	}
	Cars = &cars{Model: mStruct}
	return nil
}

// Query creates the query for the Car.
func (c *cars) Query(db query.DB, models ...*Car) *carsQueryBuilder {
	var queryModels []mapping.Model
	if len(models) > 0 {
		queryModels = make([]mapping.Model, len(models))
		for i, model := range models {
			queryModels[i] = model
		}
	}
	builder := db.Query(c.Model, queryModels...)
	return &carsQueryBuilder{builder: builder}
}

// QueryCtx creates the query for the Car with provided 'ctx' context.
func (c *cars) QueryCtx(ctx context.Context, db query.DB, models ...*Car) *carsQueryBuilder {
	var queryModels []mapping.Model
	if len(models) > 0 {
		queryModels = make([]mapping.Model, len(models))
		for i, model := range models {
			queryModels[i] = model
		}
	}
	builder := db.QueryCtx(ctx, c.Model, queryModels...)
	return &carsQueryBuilder{builder: builder}
}

// carsQueryBuilder is the query builder used to create and execute
// queries for the Carmodel.
type carsQueryBuilder struct {
	builder query.Builder
	err     error
}

// Scope returns given query scope.
func (c *carsQueryBuilder) Scope() *query.Scope {
	return c.builder.Scope()
}

// Err returns errors that occurred during query building process.
func (c *carsQueryBuilder) Err() error {
	if c.err != nil {
		return c.err
	}
	return c.builder.Err()
}

// Ctx returns the context of given query builder.
func (c *carsQueryBuilder) Ctx() context.Context {
	return c.builder.Ctx()
}

// Count returns the number of model instances for provided query.
func (c *carsQueryBuilder) Count() (int64, error) {
	if c.err != nil {
		return 0, c.err
	}
	return c.builder.Count()
}

// Insert new 'Car' instance(s) into the store.
func (c *carsQueryBuilder) Insert() error {
	if c.err != nil {
		return c.err
	}
	return c.builder.Insert()
}

// Update updates given 'Car' instances.
func (c *carsQueryBuilder) Update() (int64, error) {
	if c.err != nil {
		return 0, c.err
	}
	return c.builder.Update()
}

// Find returns all Car models that matches to given query.
func (c *carsQueryBuilder) Find() ([]*Car, error) {
	if c.err != nil {
		return nil, c.err
	}
	queryModels, err := c.builder.Find()
	if err != nil {
		return nil, err
	}
	models := make([]*Car, len(queryModels))
	for i := range queryModels {
		models[i] = queryModels[i].(*Car)
	}
	return models, nil
}

// Get returns single Car model that matches given query.
// If the model is not found the function returns error of class.QueryValueNoResult.
func (c *carsQueryBuilder) Get() (*Car, error) {
	if c.err != nil {
		return c
	}
	model, err := c.builder.Get()
	if err != nil {
		return nil, err
	}
	return model.(*Car), nil
}

// Delete deletes all Car values from the store that matches given query.
func (c *carsQueryBuilder) Delete() (int64, error) {
	if c.err != nil {
		return 0, c.err
	}
	return c.builder.Delete()
}

// Filter adds the 'filter' to the given query.
func (c *carsQueryBuilder) Filter(filter *query.FilterField) *carsQueryBuilder {
	if c.err != nil {
		return c
	}
	c.builder.Filter(filter)
	return c
}

// Where creates query with given 'filter' and 'values'.
func (c *carsQueryBuilder) Where(filter string, values ...interface{}) *carsQueryBuilder {
	if c.err != nil {
		return c
	}
	c.builder.Where(filter, values...)
	return c
}

// Limit sets the maximum number of objects returned by the Find process,
// Returns error if the given scope has already different type of pagination.
func (c *carsQueryBuilder) Limit(limit int64) *carsQueryBuilder {
	if c.err != nil {
		return c
	}
	c.builder.Limit(limit)
	return c
}

// Offset sets the query result's offset. It says to skip as many object's from the repository
// before beginning to return the result. 'Offset' 0 is the same as omitting the 'Offset' clause.
// Returns error if the given scope has already different type of pagination.
func (c *carsQueryBuilder) Offset(offset int64) *carsQueryBuilder {
	if c.err != nil {
		return c
	}
	c.builder.Offset(offset)
	return c
}

// Select adds the fields to the scope's fieldset.
// Allowed fields to select:
//  - ID / id
//  - Plates / plates
func (c *carsQueryBuilder) Select(fields ...string) *carsQueryBuilder {
	if c.err != nil {
		return c
	}
	var fieldSet []*mapping.StructField
	for _, field := range fields {
		structField, ok := Cars.Model.FieldByName(field)
		if !ok {
			c.err = errors.Newf(mapping.ClassInvalidModelField, "field: '%s' is not valid for model: 'cars'", field)
			return c
		}
		fieldSet = append(fieldSet, structField)
	}
	c.builder.Select(fieldSet...)
	return c
}

// OrderBy adds the sort fields into query scope. By default field is ordered ascending. In order to sort descending
// add '-' before the field name i.e. '-id'. The order of the fields relates to the significance of the sorting order.
// Allowed fields to sort:
//  - ID
//  - Plates
func (c *carsQueryBuilder) OrderBy(fields ...string) *carsQueryBuilder {
	if c.err != nil {
		return c
	}
	var sortFields []*query.SortField
	for _, field := range fields {
		if len(field) == 0 {
			c.err = errors.New(mapping.ClassInvalidModelField, "cannot set sorting order for an empty field for model: 'cars'")
			return c
		}
		var order query.SortOrder
		if field[0] == '-' {
			order = query.DescendingOrder
			field = field[1:]
		}
		structField, ok := Cars.Model.FieldByName(field)
		if !ok {
			c.err = errors.Newf(mapping.ClassInvalidModelField, "field: '%s' is not valid for model: 'cars'", field)
			return c
		}
		sortFields = append(sortFields, &query.SortField{StructField: structField, Order: order})
	}
	c.builder.OrderBy(sortFields...)
	return c
}
