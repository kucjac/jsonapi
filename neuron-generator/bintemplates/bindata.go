// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/00_imports.tmpl
// templates/01_initialize_collections.tmpl
// templates/02_collection.tmpl
// templates/03_collection-structure.tmpl
// templates/04_collection-builder.tmpl
// templates/05_model.tmpl
// templates/06_primary.tmpl
// templates/07_fielder.tmpl
// templates/08_single-relationer.tmpl
// templates/09_multi-relationer.tmpl

package bintemplates


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplates00importstmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x2d\xc8\x2f\x2a\x29\x56\x52\xd0\xad\xad\xe5\xaa\xae\xd6\x55\xc8\x4c\x53\xd0\xf3\x84\x08\x82\xc5\x20\x0a\x14\x34\xb8\xaa\xab\x8b\x12\xf3\xd2\x53\x15\x54\xa0\x22\x56\xb6\x08\x85\xb5\xb5\x0a\x0a\x0a\x0a\x4a\xd5\xd5\x50\xc9\xda\x5a\x25\xae\xea\xea\xd4\xbc\x14\x90\x11\x9a\x60\x73\xa1\x1c\x18\xbb\xb6\x16\x10\x00\x00\xff\xff\x08\x20\xfd\xe4\x84\x00\x00\x00")

func bindataTemplates00importstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates00importstmpl,
		"templates/00_imports.tmpl",
	)
}



func bindataTemplates00importstmpl() (*asset, error) {
	bytes, err := bindataTemplates00importstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/00_imports.tmpl",
		size: 132,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589199652, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates01initializecollectionstmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xb1\x8e\xda\x40\x14\xec\xf7\x2b\x26\x54\x10\x05\xd3\x13\x51\x01\x05\x0d\xa4\xa0\x8b\x22\xb4\xb1\x9f\xc9\x2a\xeb\xb7\xd6\xf3\xc2\x1d\xb7\xda\x7f\x3f\xad\xed\xc3\x2e\x0e\x9a\xdb\xc2\xb2\x67\x3c\xe3\x99\x91\x43\x28\xa8\x34\x4c\x98\x18\x36\xde\x68\x6b\xde\xe8\x94\x3b\x6b\x29\xf7\xc6\x71\x33\xc1\x3c\x46\xb5\x58\x60\xed\x0a\xc2\x99\x98\x44\x7b\x2a\xf0\xf7\x06\xa6\x8b\x38\x9e\xf7\x98\x93\x0c\x9b\x03\xf6\x87\x23\xb6\x9b\xdd\x31\x4b\x9a\xe3\x3f\xd3\xa0\x34\x96\xf0\xa2\x9b\x91\x58\xfb\x65\xa2\x43\x80\x37\x15\x35\x5e\x57\x35\x62\x54\xaa\xd6\xf9\x7f\x7d\x26\x84\x90\xfd\xea\x6e\xf7\xba\xa2\x18\x55\x08\xa6\x44\xb6\xab\x6a\x27\xbe\x41\x0b\x78\xaa\x6a\xab\x7d\x0a\xde\xc1\x13\x64\x1d\x43\x5c\xc4\xa8\xfc\xad\x26\x8c\x9a\xec\xee\xf5\x04\xe5\x85\xf3\x69\xe7\xb9\x7d\xf5\x24\xac\xed\xda\xb1\x97\xf4\xb2\xc4\x98\xe3\x7b\x7e\x7f\xcc\x06\xa6\xb7\x9e\x81\x44\x9c\x28\x75\xd5\xf2\xe0\x0b\x0d\x7e\xff\xf9\x9c\x51\xa9\xf8\xbe\x5d\xee\x34\xc0\xeb\x61\x70\x8c\xc6\x47\xe9\x04\xb5\xb8\xab\x29\xa8\xc0\x28\x93\x4a\x0d\x9e\xda\x7c\xa5\xde\x94\x44\xba\x8e\x33\x04\x05\xa0\xcd\x71\xfa\x01\x33\xda\x70\xb9\x82\x68\x3e\x3f\xda\xb8\xe9\x95\xe9\x98\x32\xb9\x61\x35\xd6\x3f\xcb\xf7\x11\xe4\x67\x2b\xfb\xb6\x02\x1b\x3b\xb2\x4b\x47\xc8\x5f\x84\x13\x7f\x87\xa3\x1a\xae\x3d\xcd\xc6\xaa\xf4\x47\x80\xb8\x40\x8c\xef\x01\x00\x00\xff\xff\x03\x32\x74\x5b\xec\x02\x00\x00")

func bindataTemplates01initializecollectionstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates01initializecollectionstmpl,
		"templates/01_initialize_collections.tmpl",
	)
}



func bindataTemplates01initializecollectionstmpl() (*asset, error) {
	bytes, err := bindataTemplates01initializecollectionstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/01_initialize_collections.tmpl",
		size: 748,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589294512, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates02collectiontmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xbb\x6a\x03\x31\x10\x45\xfb\xfd\x8a\x8b\xfa\x95\xfb\xb4\x71\x8a\x34\x76\x8a\xfd\x01\x79\x75\xed\x88\xe8\xb1\x48\x23\x42\x18\xf4\xef\x61\x89\x21\x21\x85\xbb\x61\xce\x39\x70\x55\x3d\xaf\x21\x13\x66\x2d\x31\x72\x95\x50\xb2\xc1\x3c\xc6\x74\x38\xe0\xb9\x78\xe2\xc6\xcc\xea\x84\x1e\x97\x2f\x64\xf6\x5a\xf2\x7c\xff\x95\x6a\x71\x3c\xe3\x74\x5e\xf0\x72\x7c\x5d\xec\xde\x2c\xef\xa1\xe1\x1a\x22\xf1\xe9\xda\x9f\xd8\xc9\xd3\x8e\x55\x21\x21\xb1\x89\x4b\x1b\xc6\x98\xa6\xcd\xad\x1f\xee\x46\xa8\xda\xb7\x9f\xf3\xe4\x12\x77\xa2\x2a\x4c\x5b\x74\x42\x98\x90\xb6\x52\xa5\x19\xd8\xff\xe4\x77\xf6\xdc\xa4\xf6\x55\x7a\xa5\x81\xc5\x03\xef\xd2\x43\xf4\xac\x77\x4b\x75\x06\xb3\x1f\xe3\x3b\x00\x00\xff\xff\x94\x51\x10\x33\x0b\x01\x00\x00")

func bindataTemplates02collectiontmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates02collectiontmpl,
		"templates/02_collection.tmpl",
	)
}



func bindataTemplates02collectiontmpl() (*asset, error) {
	bytes, err := bindataTemplates02collectiontmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/02_collection.tmpl",
		size: 267,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589289739, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates03collectionstructuretmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x54\x41\x8f\xd3\x3c\x14\xbc\xe7\x57\xcc\xb7\x87\xdd\xa4\x4a\xbd\xdf\xb9\x52\x39\x6c\xe1\xc0\x61\x91\x00\x89\xcb\x6a\x85\x5c\xe7\x75\xd7\xc2\x75\x82\xe3\x94\x2e\x96\xff\x3b\xb2\x9d\xb6\x69\xd4\x16\x10\x12\x27\x7a\x70\x65\xfb\xbd\x99\x37\xe3\x69\x9d\xab\x68\x25\x35\xe1\x4a\xd4\x4a\x91\xb0\xb2\xd6\xd3\xd6\x9a\x4e\xd8\xce\xd0\x15\xa6\xde\x67\xab\x4e\x0b\x48\x2d\x6d\x5e\xc0\x65\x00\xf0\xf9\x50\xfc\x56\x4b\x2b\xb9\x92\xdf\xc9\xb4\x98\x83\x37\x0d\xe9\x2a\x3f\x53\x50\x46\x98\xb4\x73\x8e\x2d\xf6\x45\xec\x13\x37\x92\x2f\x15\xbd\xe3\x6b\xf2\xbe\xc8\x7c\x96\xdd\xde\xe2\x52\x0d\x64\x0b\xfb\x4c\x38\x30\xa1\x6b\xa9\x82\xad\xf1\xb5\x23\xf3\x12\x9a\xef\xeb\x8a\x14\xeb\xeb\xd7\x71\x93\x6d\xb8\xb9\x8c\x3b\x39\xbe\x4d\xa7\x59\x66\x5f\x1a\xc2\xa9\x2b\x24\xbb\x7a\x6b\x22\x25\x26\x6b\xde\x34\x52\x3f\xa5\x09\x3e\xc6\x82\xa0\x69\x6f\xe5\xcf\x3d\xc8\x9d\x93\x2b\xb0\x37\x5b\x4b\x46\x73\xb5\xa8\xb5\x35\xa1\xd6\x78\x2f\x30\x11\xfb\x2d\x3b\xdc\x38\x47\xba\xf2\xbe\x00\x19\x53\x9b\x7e\xa0\x75\x62\x2f\xc3\x21\x66\x73\x5c\x80\x75\x8e\x54\x4b\xde\x8b\x31\xe2\x50\x46\x7e\x3d\x32\xd6\xf9\x22\x12\xc9\x55\xa4\xf8\x6f\x0e\x2d\x55\x4f\x1e\x3e\x86\x6c\x67\x74\xb8\x8b\x47\x3e\xae\xce\xe1\x9c\x74\x78\x8f\x39\xae\x4f\x59\xed\x22\xef\x6c\xa7\x29\x41\xf5\xf8\x5a\xaa\x3e\x35\xef\xe3\xf3\x0b\x43\xdc\x52\xca\x48\x0a\xc4\xaa\x36\x71\x37\x9a\x9f\xa5\x57\xc9\x8f\x09\x3f\x90\x20\xb9\x09\xb6\x9c\x0e\x44\x91\x68\xf2\x6a\x99\xd0\xd9\xeb\xbb\x32\x45\xac\x05\x63\x6c\x32\x22\x29\xc6\x28\xb1\xfb\xae\x93\xaa\x8a\x1c\xc9\xae\x90\xcd\x88\x76\x9f\x80\x1e\x1e\x8f\x72\xb4\xb3\x59\x91\xce\x13\x55\x81\x57\xf8\x7f\xe0\xf5\xb0\x79\x8e\x35\xff\x42\xf9\x08\xa3\x1c\x76\x17\xfb\xc6\xe0\x8d\xec\x05\x84\x94\x18\xae\x9f\x68\xa7\xe7\x80\x3f\xe2\x78\x90\x8f\x81\x66\x3f\xdb\xe1\x7d\xd3\xba\x4c\xfa\x02\x60\xb5\x4c\x92\xcf\xda\xbc\x1b\x6f\x28\x81\x31\x56\x0c\xdf\xf8\xfa\x92\x87\xae\x67\x9b\xed\x68\xfd\x30\x0f\x0b\xbb\xfd\xf5\x48\xe0\x9b\xb4\xcf\x68\x4c\xbd\x91\x15\x55\xb8\x11\x76\x7b\x83\xf0\xab\xa0\xad\xfd\xa3\xb8\x2c\xec\x36\x17\x61\x92\x1e\x6b\x91\xbe\x4b\xfc\x8b\xd1\xef\xc5\xa8\x37\xb2\xc4\xdf\x8d\x93\x73\x53\xc4\x7f\xc4\x1f\x01\x00\x00\xff\xff\xff\x40\x67\xdb\x38\x07\x00\x00")

func bindataTemplates03collectionstructuretmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates03collectionstructuretmpl,
		"templates/03_collection-structure.tmpl",
	)
}



func bindataTemplates03collectionstructuretmpl() (*asset, error) {
	bytes, err := bindataTemplates03collectionstructuretmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/03_collection-structure.tmpl",
		size: 1848,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589294297, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates04collectionbuildertmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x4f\x23\x39\x12\x7f\xe7\x53\xd4\xa2\xdd\xeb\x0e\x0a\xcd\x9c\x74\xba\x87\x48\x79\x18\x98\xdd\x11\xd2\xee\xcc\x1d\xcc\xed\x3d\x20\x74\x32\xed\xea\xe0\xa3\x63\xe7\x6c\x37\x10\xb5\xf2\xdd\x4f\x2e\xbb\xff\x25\x9d\x90\x10\xd0\x80\x76\x1f\x46\x03\xdd\xee\xaa\xf2\xaf\xaa\x7e\x55\x2e\x53\x96\x1c\x33\x21\x11\x0e\x53\x95\xe7\x98\x5a\xa1\xe4\xf1\x4d\x21\x72\x8e\xfa\x10\x8e\x17\x8b\x83\xb2\xfc\x51\x15\x16\x46\x63\x48\xe8\xf7\x93\x13\x28\xcb\xe4\xac\x5e\x9d\xfc\xb3\x40\x3d\x3f\xf5\x9f\x2c\x16\x20\x0c\xd8\x5b\x84\xff\xb9\xa7\x10\x24\x41\x61\x90\x83\x55\x90\x6a\x64\x16\x81\x49\x0e\xf8\x88\x69\x61\xd1\xc9\x73\x6b\x05\x1a\xc8\x94\xa6\x6f\xcb\x32\xf9\x4d\x71\xcc\x93\x2f\x6c\x8a\x8b\xc5\x94\x7e\x3e\xb0\xf3\x19\x6e\x56\x6d\xac\x2e\x52\x0b\xe5\x01\x00\xd4\xaa\xc9\x90\x24\x2c\xa2\x37\xa8\xb5\xfb\xa7\xf4\xc1\xe2\xc0\xa9\xbf\x4c\xd5\x0c\x41\xa3\x2d\xb4\x34\x30\x11\xf7\x28\x83\xf9\xc6\xbd\x49\x0e\xb2\x42\xa6\x10\x77\x55\x5f\x60\x8a\xe2\x9e\xd4\x1e\x6d\x32\x6a\xe0\xc5\xc7\x03\x38\xf2\x96\x78\x6d\xde\x46\xaf\x13\x3c\xc4\xfd\xd2\x93\xb0\x8f\x24\x88\x09\x36\xff\xac\x75\x6d\x31\xed\xc5\xa1\xce\x2c\xa8\x34\x2d\xb4\x46\x0e\xbc\xd0\x42\x4e\xda\x6e\x70\xbf\xce\xb4\x4a\xd1\x98\x7d\xb7\xf4\xb3\xd6\xf1\xc0\xeb\x0d\x3b\x11\x19\xac\x13\x96\x38\xbc\x7f\x18\x83\x14\x79\x58\xdc\xd9\xfa\xfa\x8f\x68\xed\x62\x67\xa0\xc8\xb8\x00\xd3\x99\x7d\xac\x61\x72\x91\x95\x2a\x69\xf1\xd1\x82\xca\x3a\x7e\xae\x3e\xdd\x13\x96\x33\xfb\x18\x0f\x2a\x1d\xc9\x59\xd0\xb5\xbb\xab\x49\x4e\xb5\x03\x55\x48\xdb\xd9\x83\x2c\xa6\x37\xa8\xdd\x16\x28\x31\x40\x48\x63\x99\x4c\x43\xfe\xcc\xb4\xba\x17\x1c\x79\x88\xfb\x7d\x77\xe4\xb4\xc7\x03\x88\x85\xb4\x7f\xff\xdb\xd0\xbb\x7c\xb0\xa7\xcf\x3f\x0c\x5f\xc3\xed\xc1\xd4\x00\xdb\xb9\x34\xa8\x2d\x48\x7c\x80\x68\x89\x4e\xa2\x1a\xb1\xd8\x0c\x40\x48\xab\x08\x56\x63\x95\xde\x3b\xd7\xbd\xda\xb7\x9b\x1b\x95\x7d\x01\xa5\x7f\xcd\xb8\xa3\xe3\x82\xfe\xab\xa8\x6f\x3d\x5e\x7b\xf3\x86\xd7\xf7\x3e\xe2\xa9\xb2\x35\x40\xf5\x8b\x90\xbc\x4e\x43\x96\xe7\xcb\x45\xca\x27\x63\x60\xe1\x29\xb3\xe9\x2d\x1a\x57\xf1\x5a\x34\xb3\x2f\x7a\xce\x04\x87\xdd\xd5\xf5\xd1\x92\xf2\x17\x02\x52\x8a\x7c\x6b\x28\x69\x47\x64\x83\x21\xed\xae\x41\xd8\x0a\x57\xbf\x8b\xca\xce\x27\xcd\xe9\x6a\x0d\x20\x8f\xc6\x30\x65\x77\xe8\x91\x80\x16\x14\xe0\xb0\xc8\x51\xc6\x2d\xf3\x06\x5e\x99\x23\x47\xe1\xbe\xd4\x4c\x4e\xb0\x6d\x7f\x4b\xb3\x97\x7f\x25\xae\x61\xdc\x5e\x71\x25\xae\x93\x78\x55\xd5\x60\x35\xb4\xa6\x01\x11\x29\xf2\x10\x38\x9f\xb1\xa1\x6f\x23\xe4\x24\x5f\xe9\x6f\x02\x8f\x77\x22\xa7\x13\x36\x8e\xcf\x32\x22\xa9\xc0\xf8\x06\xa4\xb2\x90\xa9\x42\x72\x7a\xec\xe2\xca\xe1\xdd\x6d\x09\x5c\x89\x48\x73\x66\x8c\x8f\xa4\xdf\x59\x5e\xe0\x17\x75\x81\xa6\xc8\xed\xbe\xb1\xf8\x19\xa9\x2c\xbc\x52\x20\xae\xfb\x68\x39\x12\x76\x8b\x3c\xb2\xf9\x99\x81\xd7\x76\x6f\x6f\x28\xb4\x5d\xfe\x09\x73\xb4\x08\x9c\xfe\xeb\x67\x8b\x7b\xe7\x0c\x03\x99\x56\xd3\xa6\xfa\x6c\x08\x81\xfd\xbc\xe5\x0d\x7a\x1f\xbc\x5b\xd9\x5a\xf3\x6e\x6e\x51\x03\xe3\xdc\x77\x3f\x51\x46\x0f\x22\x08\x65\xfb\x45\xf9\xd5\x49\x8e\xbd\x82\xaa\x5d\xf7\x0f\x7f\x11\x98\xf3\x10\xef\x1b\x24\x3c\x0f\xcf\xed\x83\x7e\x4b\x82\x6d\x6d\x63\xb0\x2d\xfe\x01\xee\x7f\xdf\xa2\xc6\x70\x4c\x33\xa1\x3b\x7e\x10\xf6\xb6\xea\x0d\x2a\xf4\xdd\x09\x2e\xf2\x41\x1c\xed\x8b\x3b\xe9\xac\x60\x37\xd6\x9d\x5b\x86\x55\x82\x24\x49\x22\xa4\x45\x9d\xb1\x14\xcb\xc5\x6b\x79\xe0\xa5\x5d\xd0\xde\x51\xb5\x95\x24\x49\x76\x72\x46\x59\xfa\x42\xf5\xa3\xc6\x9c\x11\xb9\xbb\x23\xb8\x27\x91\x8b\xf0\xc8\xc0\xa2\x6a\x77\xd3\xbc\xe0\x58\x96\xf5\xea\x8a\x98\x40\xf8\x57\x75\x77\x57\x2d\x70\x6d\x5d\x38\x6d\x2f\x1b\x12\x38\xaa\xa9\x3e\x1f\x25\xa8\x99\x7b\xc5\xf2\x46\x00\xe5\x84\x41\x1b\x81\x1f\x21\xf8\xfc\xcc\xe8\xa9\xcb\xce\xb0\xcf\xa0\x25\x98\xe1\x7a\xa8\x60\x60\x1d\x35\xeb\x71\x70\x91\xb3\xfc\x76\xb5\xe5\xee\xdd\xfa\x62\x11\x97\xa5\x55\xbf\xaa\x07\xd4\x67\x6c\x8a\x39\x2c\xbf\xaf\xec\x77\x31\xe6\xa3\xce\x87\xd7\x53\x0a\x5b\x21\xb6\x21\x14\x36\x87\xd9\x06\xd7\xb7\x59\xd3\xdb\xbb\xa1\xca\xfd\xce\xb4\x60\x37\x39\xfa\x1d\x2d\x45\xc7\xe9\xfc\x5c\x72\x7c\x8c\xdb\xd0\xd0\x93\xaa\x73\x59\x57\x06\x9f\xdc\xd8\x18\xc2\xd0\x21\xf9\x82\x0f\x59\x3c\x65\xb3\x99\x90\x93\xe4\xcc\x35\x1b\xe7\x2e\x5d\x25\xcb\x87\x70\xf8\x19\xad\x15\x72\xe2\x4e\x14\xcb\xe0\x47\x70\x33\x07\xe1\x8c\xa1\xc6\xcc\xf7\x35\x51\x50\xdc\x3d\x7d\x64\x4c\xe4\xc8\x47\xf0\xd3\xfd\x21\x21\x31\x78\x26\x9c\x27\x27\x90\xde\x62\x7a\xd7\x0a\x53\xb4\xf5\xcc\xa9\x09\x4b\xb7\xf6\x9e\x69\xe8\xc6\x39\x5c\x5d\x1f\x55\xfb\xbc\xa4\x39\x13\x3d\xaf\x5b\xcb\xff\x0c\xbd\xcc\xa6\xc3\xdc\x36\xfc\x1a\xdc\x4d\x23\x77\x08\xea\x8e\x44\x55\x1f\x11\x26\x5e\x71\x3c\x48\x68\xcd\xe9\xdc\x49\x8a\x49\x6d\x03\x8a\xc8\xe0\x07\x75\xd7\x92\xba\xa5\x47\x37\x38\xf4\x9e\xe5\x82\x93\x01\xc1\xb6\x43\xd2\x39\x82\xe8\x27\x13\x75\xbb\xd1\x0a\xce\x8e\xcb\x4f\x99\xc1\x6f\xf3\x19\x79\x93\x3c\x7d\x18\xc0\x1a\x74\x8c\xdc\xd6\x9d\x8d\x4b\xdb\x59\x12\xdc\x34\x06\x36\x9b\xa1\xe4\x71\xf7\xf9\xb0\x0d\xee\x60\x57\x3e\x0f\x1c\x13\x37\x19\xd9\x95\xbe\x23\xb7\x97\xe5\x31\xa0\xe4\x81\xbb\x7f\x15\x53\x61\xc1\xa0\xf5\x04\x3a\x65\x8f\x62\x5a\x4c\x5b\x63\x1e\x75\xf3\x5f\x4c\xad\x09\xc2\x91\xbb\xd4\x71\x2b\xe9\x48\x1a\x26\x7a\x43\x27\xe9\xa2\xd3\xfd\x8b\xac\xd5\x20\xd1\x24\x13\x6e\x99\xeb\x46\x35\x32\x3e\x07\x2e\xb2\x0c\x35\x4a\x0b\x34\x58\x55\x19\xcc\xd8\x44\xc8\x25\x6e\x7e\x5e\x45\xa7\x2d\xc5\x39\x6d\x8c\x3a\xce\xf7\x52\xb8\x5b\x86\xef\xda\x39\x7d\xcd\x32\x97\xcd\xb5\x1f\x7d\xef\xa4\xe9\xb4\x15\x19\x50\xf4\x3a\x81\x73\x0b\x86\xcd\xa9\x40\x9a\x3b\x31\x03\x66\x60\xca\xe4\x3c\x38\x39\x6a\x1d\x09\x34\xce\x94\x11\x56\xe9\xb9\x13\x7f\x83\x99\x3b\x21\xdc\xe0\x44\x48\xe9\x48\xb5\xa9\xb0\x7e\x31\x9d\xea\x20\xf2\x66\x44\xf0\xa1\x1a\xc4\x1b\xd7\x07\x30\x03\x6a\x2a\x3c\x1b\x53\x7a\x56\xcb\xd2\x9c\x15\x06\x93\x37\x15\x3d\xde\xb6\xd8\x23\xf6\xbe\xe2\xa7\x63\xfa\xae\x11\x74\x89\xee\x55\x73\xd4\x69\x5a\x29\xf2\xa3\xf3\x81\x8b\x8f\x50\x37\x7c\x63\x96\xe7\xea\x01\x79\x6b\xa9\x21\x21\x23\xf7\x12\x8e\x9b\x63\xe7\x3f\xb4\x98\x32\x3d\xaf\x5a\xbb\x93\x9e\x37\x58\x68\x25\xfd\xfb\xa6\xf9\xac\x6b\x5a\x58\x1d\x58\x36\x5c\x04\x91\x06\xbf\xa6\x2d\xb9\x7a\xd2\x95\x88\x92\xd3\x77\x7b\xde\xa6\xd0\xfe\xe2\xb0\xe1\xa5\xd6\xed\xbb\x06\x88\xeb\x19\xc8\xac\x4b\xb4\xbb\x77\x0b\x61\x43\x1b\x9b\x81\xae\x11\xbd\xbd\xdf\xee\x8d\xc1\xab\x36\x05\xb4\xa8\xe9\xf0\x46\x34\x5c\x5e\x39\x69\x44\x87\xc3\x4d\xed\xc0\xd6\xad\x40\x8d\x7e\xdd\x04\x54\x4f\xf6\x2b\xff\xed\x98\xbb\x44\xbb\xeb\x49\xce\x15\x07\xcd\x51\x9f\xce\x9b\xdc\x36\x4a\xdb\xca\xe7\x74\x05\xd1\xbe\x70\x84\xd3\xb9\x3b\x53\xb1\x22\x0f\x6b\x1c\x9c\xca\x89\x40\x0e\xcc\xa4\x28\xb9\x73\x04\x9c\x4b\xff\x94\xf2\xde\x09\xe4\x58\xbd\x74\x4a\x19\xe7\x10\x1d\x47\x55\xe9\xa8\x29\x05\xa4\x2b\x09\x22\xc1\x04\xa2\x63\xc1\xa3\x04\xbe\xdd\x62\x90\xa4\xb2\x36\xf5\x50\x97\x83\x0d\x05\x89\x89\x14\x99\x48\x99\x4c\xb1\x5a\xe9\xf4\xba\xaa\x42\x9f\xaf\xe3\x24\xa5\x9f\x62\xa4\xad\x18\xa7\x2c\x45\x16\x16\x24\x97\x4a\x5b\x17\xfd\xeb\xa9\xa8\xa1\x9c\x97\xe2\x9e\xe0\xc5\xb7\x4a\x3e\x0e\xe6\xe6\xb0\x12\x6e\x9b\xab\x67\xbb\x50\x8f\xc8\x68\x86\xee\x73\x12\xc6\x63\xf8\xf0\x5c\xd6\x78\x9a\x34\x52\x26\x1d\x51\x50\xeb\xd4\x0e\x25\xb2\x95\x49\xc0\xe9\xcc\xce\x83\xc5\x4f\xf3\xc8\xbe\x0c\xe2\x60\xf4\xea\x1b\xf8\xc8\xeb\x6d\x6c\xc8\x98\xab\x0f\xd7\x0e\x19\x97\x5f\x5d\x6c\xfc\xe7\xe1\xfa\x20\xf9\x54\x67\x64\x57\x4c\x4d\x57\x30\x0e\xf2\xfe\x3a\xba\xee\x31\xe8\x8f\x55\x05\x36\x9e\x0a\xb7\x76\x62\x2b\x0f\xea\x42\xd0\x3c\x1b\xc2\x5f\x96\x52\xa3\x6c\x55\xe8\x51\x17\x71\x72\xda\xc8\xfb\x74\xd1\xad\x1b\x4f\x75\x82\x81\x2b\x1a\xc5\xab\x65\x63\xc3\x01\x71\x9b\xd9\x9f\xa7\xc4\xe3\x66\x15\x8d\xfc\x46\x63\x88\x37\x0c\x1e\x06\xe1\xd4\xf9\x91\xf3\xd5\xa9\x8c\xaf\x4f\x9e\xf5\x79\x18\xca\xf4\xad\x92\x7c\xf5\x8a\xb3\x67\x76\xf3\x52\x23\xbe\x5e\x5b\xdb\x63\xad\x60\x97\xaf\x0f\xcd\xac\xcb\x5c\xe6\x22\x75\x76\x24\x09\x95\x80\xc5\xe2\xa8\x7f\x2c\xd1\x73\x5f\xff\x0a\xa3\xbd\x95\x4b\x91\xef\x34\xde\x0b\xa6\x6e\x33\xc1\x9b\x6c\x9a\xe0\xd5\xc1\xb9\xe7\x28\xaf\xca\x28\x91\x11\x5b\xac\x38\x90\x02\x7d\x5b\x8c\xab\xfc\xfb\xc8\x79\x9d\x29\xad\xb9\xcd\x4a\xd0\x0c\x82\xf2\x63\xc0\xdc\x34\xaa\x56\x2e\x9a\x2b\x84\x7e\xf3\xf7\x8e\xae\x3e\xae\xca\xea\xbd\x69\xee\x89\xd3\xde\xfb\xe6\x95\x75\x57\xe2\xfa\x99\x77\x68\x6b\x36\xef\xb5\xd5\x3c\xd4\x8c\xa1\xda\x23\xa9\xad\xb9\xc7\x7d\x72\x72\x04\xdf\xbe\x7e\xfa\x3a\x0a\x93\xd5\x30\x34\xa8\xbf\x14\x74\xf9\x49\xdd\xa0\x55\x70\x83\x40\x23\x90\xa3\x93\xfd\xa8\xeb\x12\x6d\x0f\x29\xd1\xe0\xe5\xcd\x51\x57\xaf\xad\x7f\x52\xd7\x9f\xd4\xb5\xf1\xb8\x69\xff\xb8\xd4\xb5\x66\xf3\xdf\x83\xba\xfc\xa4\xd3\x13\x97\xc6\xa9\xba\x47\xbe\x3f\x79\x5d\x90\xa0\x1e\x66\xf2\x1a\xde\x20\x85\xad\xb3\x78\xe3\x9f\x93\x3c\x93\x83\xe8\x4f\x4a\xde\x0d\x0d\x7d\x18\xbe\x35\x26\xda\x25\xd3\xbc\x5f\x57\x93\x6d\xb0\x94\x53\xe1\xa7\xff\x07\x00\x00\xff\xff\xea\x9b\xbd\x93\x2a\x30\x00\x00")

func bindataTemplates04collectionbuildertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates04collectionbuildertmpl,
		"templates/04_collection-builder.tmpl",
	)
}



func bindataTemplates04collectionbuildertmpl() (*asset, error) {
	bytes, err := bindataTemplates04collectionbuildertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/04_collection-builder.tmpl",
		size: 12330,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589365367, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates05modeltmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xcd\x4a\xc3\x40\x14\x85\xf7\x79\x8a\x43\xf6\x49\xf6\x6e\xad\x82\x0b\x5b\xd1\xbc\xc0\xd5\x39\x89\x17\xe7\x27\x4c\xa6\x48\x19\xf2\xee\x32\x4d\x09\x05\xb5\xbb\xcb\xf9\xbe\x73\x36\x37\xe7\x06\x86\x83\x7a\xa2\x76\xc1\xd0\xd6\x68\x96\xa5\xea\x3a\xdc\x07\x43\x8c\xf4\x8c\x92\x68\xf0\x7e\x82\xe7\x31\x06\xdf\x5d\xb2\x10\x5b\xec\x0e\xd8\x1f\x7a\x3c\xec\x9e\xfa\xb6\x74\xfa\x4f\x9d\x31\xa8\x25\xbe\x65\xbe\x2a\x4b\xba\x2b\x38\x67\x24\x75\x9c\x93\xb8\x09\xcb\x52\x55\x93\x7c\x7c\xc9\x48\xe4\xdc\xbe\xac\xe7\x5e\x1c\x0b\x29\x2a\xdd\x64\x25\x11\xb5\xba\x29\xc4\x34\xd7\x68\xf1\x8b\x4d\x51\x9d\xc4\xd3\x85\xe5\xac\x03\xda\x47\xa5\x35\x8c\x6b\x70\xe5\x0e\x6b\xbe\xb9\x0d\xe8\xcd\xd6\x7a\x53\x3f\x5a\xbe\xd2\x4a\xd2\xe0\xff\xa8\xcf\x67\xa1\x89\x9b\xf1\xcf\xd0\xf3\xd1\x26\xbd\xb1\xe3\x0a\xbf\x3d\x73\xbe\xca\x27\x7e\x02\x00\x00\xff\xff\xeb\xde\xbe\x97\xa0\x01\x00\x00")

func bindataTemplates05modeltmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates05modeltmpl,
		"templates/05_model.tmpl",
	)
}



func bindataTemplates05modeltmpl() (*asset, error) {
	bytes, err := bindataTemplates05modeltmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/05_model.tmpl",
		size: 416,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589364134, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates06primarytmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcd\x6e\xdc\x36\x10\xbe\xef\x53\x0c\x16\x69\x2c\x05\x5e\xa5\xb9\xba\xf0\xa1\x31\xd0\xd4\x28\x6a\x04\x71\xd0\x02\xbd\x14\x8c\x34\xf2\x12\xa1\x48\x85\xe4\xca\x5d\x10\x7c\xf7\x82\xa4\xfe\x57\x92\xb5\x4d\x8c\xc6\xa7\x35\x39\xf3\xcd\x37\xbf\x1c\x19\x93\x61\x4e\x39\xc2\xb6\x94\xb4\x20\xf2\xb8\x85\x9d\xb5\x1b\x63\x76\xf0\x42\x1c\x34\x5c\x5d\x43\xe2\x4f\x5e\xbf\x86\x1b\x51\x94\x94\x21\x68\x5a\x20\xa4\x7b\x4c\x3f\x03\xcd\xc1\x98\xe4\x8e\x14\x68\x2d\xd0\xa2\x64\x58\x20\xd7\x0a\x0a\x52\x96\x94\x3f\x24\xbf\x8b\x0c\x19\x50\xae\x51\xe6\x24\xc5\x64\x53\x11\x09\x7f\x8f\xae\xaf\xe1\x65\x0b\x62\xec\xc6\x99\xba\xc3\x83\x14\xfc\x46\x30\x86\xa9\xa6\x82\xbb\xcb\x15\xf8\x50\xa0\xde\x8b\x2c\x71\x10\x1f\x50\x1f\x24\x57\xa0\xf7\x08\xdc\xa9\x8b\xdc\xff\x4e\x5b\x50\xc8\x85\xf4\x47\x17\xad\xf9\x8b\x64\x93\x1f\x78\x0a\x91\x31\xc9\x07\x4c\x91\x56\x28\xad\x85\x57\xad\x40\x3c\x49\x2d\x8a\x41\x69\x49\xf9\x03\x98\x0d\x00\x80\xf4\xb6\x61\x6b\x4c\x32\x14\xb4\x76\xbb\x09\x1e\xde\xaa\xf7\x21\xe0\xbf\xe1\xf1\x2f\x94\xa2\xef\xdd\x97\x03\xca\xe3\xac\x6f\x4f\x11\x1c\x23\x47\x31\x7c\x12\x82\x0d\xa9\x19\x93\xd4\x52\xc9\xad\x72\x52\xd6\xd6\xc4\xde\xa1\xee\xf4\xff\x20\xec\x80\xdf\x8e\xda\x29\x76\x14\x77\x30\xc6\x9e\x70\xec\x70\x92\x1e\xe3\x00\x37\xc5\xf7\x57\xa2\xf6\xe4\x13\xc3\xe7\xe4\x3d\xb0\x31\xc9\xdf\x18\x9a\x43\x2f\xbe\xef\x85\x97\xf1\x7d\xe4\xee\x43\xd7\x2c\xf9\x06\xd7\xd7\xc0\x69\x93\xb3\x33\x62\xe2\x44\x6d\x4d\x02\x79\xd6\x9a\x1c\x53\x7a\x7b\xd4\x78\xcf\x68\x8a\xad\x44\x6d\x20\xd4\x71\x34\xe3\x82\xb5\xaf\x3c\xae\xb5\x4f\x10\x89\x1b\x0e\x4c\x9d\x98\xf8\x5a\xec\x91\x7b\x13\x65\xe0\x0a\xfa\x39\x4b\xa0\xc5\x5f\x2e\x5f\x9a\x03\x7e\xe9\x3c\xf5\x6d\xbe\xe5\x94\x6d\x9d\x8b\x33\x31\x88\xba\x18\x34\xb7\x1f\x8f\x25\x2e\x68\xc4\xb5\xc6\x84\xe6\x3b\xd4\xa1\xb7\x17\xb9\x34\x00\x75\x24\xef\xfb\x9e\x7e\xbb\x00\xde\x9f\xf6\x7e\x15\x52\xd4\x05\x30\x06\x94\x52\xc8\xf5\x6d\x14\x10\x4e\x9a\xe5\xc9\xee\x72\xf2\xe3\xd6\x6a\x8e\xa6\xda\xc7\x99\xba\x04\xf1\xd9\xbd\x87\xde\x66\x12\x9d\x24\x28\xfe\xc9\x09\x9c\x43\xa2\x9a\xa3\xe0\x3d\x27\x3c\x83\x88\x0b\xdd\x0f\x81\x6f\xd9\x78\x29\x28\x16\x7c\xcb\x2d\x13\x7e\x4b\x14\xfe\x57\xd2\x2f\x17\x58\xd7\x21\x33\x46\x12\xfe\x80\xf0\xe2\x51\x92\xb2\xc4\xcc\x6f\x11\x0d\xd0\x9f\xe1\xcc\x99\x57\xab\x58\x37\x28\x53\x64\x97\x0b\xc4\xfd\x69\x2c\x4a\x07\x67\x8c\xf2\xe3\x6e\x90\x34\x78\x63\x6d\x54\xc5\x3d\x40\xb7\xf4\x3c\x19\x01\x87\xd9\xd3\x19\xcc\xb8\xf5\x30\x93\xf9\x18\xb2\x19\x4e\xf0\xfe\x7f\xbd\xa9\xce\x10\x22\x86\xbc\xf3\xec\x67\xa6\x51\x72\xa2\x3d\xa4\x8a\xe1\x4d\x0f\x63\x07\x61\x10\xac\xd5\x70\x6b\x9f\xdf\xf4\x48\x23\x02\xda\x67\xce\xed\x4e\x0f\xb4\x42\x0e\x39\x45\x96\x25\xf3\x6d\x42\x79\x86\xff\xcc\xd9\x82\x1f\x67\xd2\xea\x23\x78\x5e\x6a\x07\x2a\x6b\xd3\x3b\x50\x9a\x4d\xf1\x0e\x56\x25\x79\x1a\x6c\x74\x3e\x95\xe8\x1d\x84\x09\xbc\x6e\x24\x0d\xeb\xfe\x3e\x25\x9c\x8f\x42\xb3\x6e\x5b\xf0\xaa\x61\x0a\x4f\xbe\xd7\x3d\x24\x3f\x97\x55\x72\x87\x8f\x79\xd4\x2c\xdf\x37\x8c\x28\x75\xcb\x2b\xc2\x68\xf6\x8b\x2b\x02\x3f\xd5\x2f\xdd\xa7\x84\xa8\x68\x86\x19\xd0\x70\x19\x6a\xe1\x0a\x2e\x7e\xf8\x78\xd1\x2e\xdd\xf5\xf7\x46\x28\x1f\x7f\x5a\xb8\x97\x25\x48\x6d\x2f\x5b\x02\x55\x00\x1d\xb8\xd2\xbe\x58\x93\xd9\x39\xaf\x66\xd5\x23\xd5\xe9\x3e\x98\xf1\x45\xd3\xd5\xae\xd3\x8a\xdb\xc7\xa8\x9e\x69\x1d\x68\x7f\xaa\x8d\xaa\xba\xa1\x92\x12\x85\x2e\xff\xad\x92\xb5\x57\x5f\x51\xe7\x03\xe1\xfe\xd0\x68\xc8\x7f\xaf\xb5\x3e\xc5\xaf\x5f\xf3\x6d\x69\x67\x98\x93\x03\xd3\x57\xff\x67\xfd\x75\x5f\x83\xdb\x4b\xe8\x75\xc7\x60\x89\xe5\x94\xb5\x6b\x53\xfd\xe3\xdf\x00\x00\x00\xff\xff\xf7\x9e\xe3\xe6\x4c\x0f\x00\x00")

func bindataTemplates06primarytmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates06primarytmpl,
		"templates/06_primary.tmpl",
	)
}



func bindataTemplates06primarytmpl() (*asset, error) {
	bytes, err := bindataTemplates06primarytmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/06_primary.tmpl",
		size: 3916,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589281736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates07fieldertmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5b\x6f\xdb\x36\x14\x7e\xf7\xaf\x38\x30\xd2\x46\x32\x1c\x39\x7d\xf5\xe0\x87\xb5\xc3\xb6\x3c\xac\x1d\xe6\x60\x03\x36\x0c\x03\x2b\x1d\x25\x44\x69\x4a\x25\x69\x65\x05\xc1\xff\x3e\x90\xd4\xcd\xba\xd8\x32\xd2\xac\x89\x1f\xc5\x73\xff\xbe\x73\x0e\x69\xad\x13\x4c\x29\x47\x98\xa7\x14\x59\x82\x62\x0e\x57\xc6\xcc\xb4\xbe\x82\x8b\x6c\xaf\x60\xbd\x81\xc8\x7d\x59\xad\xe0\x5d\xb6\xcb\x29\x43\x50\x74\x87\x10\xdf\x63\xfc\x09\x68\x0a\x5a\x47\xef\xc9\x0e\x8d\x01\xba\xcb\x19\xee\x90\x2b\x09\x3b\x92\xe7\x94\xdf\x45\x3f\x7a\xa3\x40\xb9\x42\x91\x92\x18\xa3\x59\x41\x04\xfc\xd3\x13\xd8\xc0\xeb\xda\x90\x36\x33\xeb\xee\x27\x54\xee\xf4\x4f\x14\xd9\xef\x84\xed\x71\x9a\x03\x39\x4b\xf7\x3c\x86\x40\xeb\xe8\x37\x8c\x91\x16\x28\x8c\x81\x45\x6d\x3d\xec\x1b\x0e\x5c\xee\xb0\xa8\x8c\x6e\x95\xd8\xc7\x5e\x26\x84\xa0\x36\xad\xcd\x12\x50\x88\x4c\x84\xa0\x67\x00\x00\xf2\x81\xaa\xf8\x1e\x9c\x76\x74\xc3\x13\xfc\xf7\xaf\xeb\xbf\xcb\x33\xad\x05\xe1\x77\x08\x17\xde\xb6\xad\xa3\x33\x28\x5d\x35\xad\x44\x4c\x24\x82\xd6\x17\x2d\x75\x63\xd6\xb0\x5a\x35\x1f\x7d\xc4\x4e\xda\xfe\x04\xaa\xbd\xe0\xa0\x35\x4d\x01\x3f\x97\xa6\x23\x9b\x06\xcc\x39\x65\x73\x63\xdc\x51\x65\x51\xfe\x9a\xb9\xd8\x8d\x09\xb4\x46\x9e\xd8\xe3\xf2\xec\xf6\x4b\x8e\xa3\xd2\x61\x29\xdd\xd3\xb2\x9e\x4a\xad\x61\xf7\x95\xe6\x12\x38\x65\x65\x19\x90\x27\x75\xca\x09\xa6\x64\xcf\xd4\xba\x9b\x11\xa7\xac\x2c\xad\x8c\xde\xe3\x43\x1a\x54\x48\xbc\x63\x44\xca\x1b\x5e\x10\x46\x93\x5f\xb2\x04\x99\xab\xe1\x12\xe6\xb9\xc8\x0a\x9a\x60\x02\xd4\x1f\x7a\x10\x80\x93\x1d\xae\xe1\xf2\x95\xbc\x9c\x2f\xa1\xa9\x61\x10\x86\xce\xa5\x99\x79\x6a\xdd\xc8\x9a\x00\x13\x59\x7b\x8a\x53\x2d\x8b\xc7\xd9\xf4\x31\xcb\xd8\x73\xa1\x51\x0d\xbd\x07\x76\x00\x35\xaf\x54\x2a\xa4\x84\x49\x7c\x72\x9c\x3c\x42\xdb\xa7\x6a\xfe\x9e\xe1\xa3\x70\xb9\x5c\xbf\x11\x4c\x5a\xdb\x09\xdc\xca\x23\xea\x48\xc2\x06\x3a\xad\x79\x46\xcb\xfd\x2f\xdd\x76\xd8\xe2\xb3\x7a\xae\xff\x4c\xe4\x3d\xf9\xc8\xd0\xd9\x3f\x03\xde\x29\xa3\xbd\x6f\xfb\xa5\x8c\xf7\xc1\x71\x5c\xdb\xb3\x3f\xb7\x6e\x4f\xb2\x62\x63\x8b\x5d\xc6\xd9\xef\xf9\xe3\xda\xcd\x0c\x68\x10\xec\x93\xaa\x1f\xed\xdb\x2f\x0a\xb7\x8c\xc6\x78\x20\xd3\xf2\x2c\x95\xa0\xfc\x2e\x18\x59\x39\x8b\x66\xd5\x1c\x8f\x2f\x3c\x0c\xd0\xde\x53\x90\xc9\x51\xaf\x8f\x75\x37\xe0\xcd\xea\x1d\x19\x92\x5f\x6b\x95\xf9\xbe\x82\x34\x13\x70\x47\x0b\xe4\xb0\xb3\x3a\x83\xdd\xb6\x84\x83\x86\x08\x67\x87\xf7\xa7\xaf\xdc\x5f\x2f\xaf\xaf\xce\xe7\xfe\x73\x87\x76\xfb\x04\xd0\x6e\x27\x42\xbb\x84\xc2\x7b\x6d\xf0\x0d\x21\x40\x21\x5e\xc0\xf0\xf4\x91\x0f\x0e\xc8\x29\xdb\xb6\x3d\x0b\x3a\xab\x6d\xca\xc4\xb4\x01\x2c\x21\xfb\x64\x13\x76\x91\x44\x41\xe7\x42\x1e\x7e\x67\x8f\xcf\x0f\xac\x38\x19\x96\x2b\x0f\xe1\x09\x04\x3c\x53\x4d\x9d\xdc\xc8\x0e\xfb\x75\x6b\x45\x6d\x1f\x7e\xd5\x5b\x8f\x2a\xa0\x12\x78\xc6\xaf\xf2\x52\xd0\xe7\x31\x29\xc5\xb7\x44\xe2\xe3\xd2\x7c\x3d\x25\xcf\x66\x40\x77\x69\xf1\x87\x20\x79\x8e\x89\x8d\x41\x1e\x00\x53\xa5\x88\x09\x3c\x78\x19\x50\x56\x28\x6a\x99\x29\x19\x5b\x9d\xaf\x37\x27\xad\x0e\xd7\xa2\x34\x30\x56\x84\x53\x24\xb6\x3f\x85\xbb\xdc\x1a\xd5\x5a\xba\x8d\xdb\xa2\x10\xbc\x31\x26\x28\xc2\xf3\x2b\x6b\x6d\x76\xb4\x06\xf7\xea\x59\x97\xd2\x06\xf1\x7e\x4c\xdd\xe6\x98\x0e\xe8\xe0\x45\xc4\xb2\x3a\xc0\xcf\x10\x30\xe4\x55\x41\xbe\x67\x0a\x05\x27\xca\xc5\x20\x43\xb8\x0e\xfb\x7a\x27\x54\xde\x0c\xf2\x04\x48\x25\xe6\x79\xe2\x46\xb9\xba\xc7\xee\x70\x3a\xd1\x17\xd4\x8e\xb5\x61\xcf\x70\xfd\x02\x08\x32\x72\xf5\x3a\x8b\x22\x63\xf4\x68\x5f\xb4\x8e\xd1\xe3\xdc\x67\x4d\xb3\xe2\xc6\x9f\x35\x16\x53\xbb\x8d\x6f\x2f\x6b\x60\xcb\xbd\xfd\x4a\xce\xcb\xf5\x37\xf4\xde\x19\xad\x4a\xb9\x0b\x8b\x16\xfa\xd6\x47\xd8\x02\xb7\x1e\x30\xa4\xcd\x83\xd6\x98\xe9\xf0\xa3\x6d\xbe\x5a\x96\x07\xaa\xc6\xac\x1f\xc5\x9c\x09\x2d\xfc\x6c\x59\x33\x9c\x6b\xb7\x62\x8b\x53\x25\x3b\x56\x8c\xc5\xa3\xab\xd1\xe7\x78\x3d\xda\x7a\x6f\xf6\x67\x44\xf0\x5e\xc7\x8d\x3f\x90\xaa\x2f\xab\x05\xdc\x7e\xf8\xe1\xc3\x1a\x24\x2a\xe7\x4c\xc6\x84\x73\x14\x40\x64\xd5\x1a\x36\x22\x87\xca\x62\xd5\x99\xd1\x47\x9f\x77\xdf\xba\x18\x23\x0f\xc2\xa7\xfe\xe3\xa5\xf5\x80\xb0\xe1\x56\xcf\x87\x92\x83\x9e\x6f\xe3\x7f\x80\xd6\x41\xff\x17\x00\x00\xff\xff\x24\xa9\x01\xcf\xfc\x17\x00\x00")

func bindataTemplates07fieldertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates07fieldertmpl,
		"templates/07_fielder.tmpl",
	)
}



func bindataTemplates07fieldertmpl() (*asset, error) {
	bytes, err := bindataTemplates07fieldertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/07_fielder.tmpl",
		size: 6140,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589281723, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates08singlerelationertmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6b\xdb\x30\x10\x7e\xcf\xaf\x38\x42\xd6\xc4\xc1\x71\xf6\x9c\x91\x97\x05\x36\x02\x5b\x19\x4d\xd9\xcb\x18\x43\xd8\xe7\x54\x54\x96\x8c\x24\x3b\x1b\x42\xff\x7d\x48\xb6\x95\xd8\xc9\xda\xac\xac\x30\x3f\xb5\xa7\xd3\xf7\xdd\x7d\xf7\xe9\x62\x4c\x86\x39\xe5\x08\x63\x45\xf9\x9e\xe1\x42\x22\x23\x9a\x0a\x8e\x72\x0c\x0b\x6b\x47\xc6\x2c\x60\x22\x2a\x0d\xab\x35\x24\x3e\xb2\x5c\xc2\x46\x14\x25\x65\x08\x9a\x16\x08\xe9\x03\xa6\x8f\x40\x73\x30\x26\xb9\x25\x05\x5a\x0b\xb4\x28\x19\x16\xc8\xb5\x82\x82\x94\x25\xe5\xfb\x64\xe7\xe1\xef\x02\x3a\x50\xae\x51\xe6\x24\xc5\x64\x54\x13\x09\x3f\xfe\x9c\xb9\x86\x9b\x00\x6d\xec\xc8\x15\xf0\x11\x75\x97\xf0\x59\x64\xc8\xfe\x96\x31\xaf\x78\x0a\x33\x63\x92\x3b\x4c\x91\xd6\x28\xad\x85\x79\x20\x89\xce\xf0\x67\x9d\x2c\x30\x0f\xf0\x5a\x56\xa9\xfe\x40\x91\x65\x11\xcc\xba\xa8\xcf\x8e\x01\xa5\x14\x32\x02\x33\x02\x00\x50\x07\xaa\xd3\x07\xe8\x20\x92\x2d\xcf\xf0\xe7\xb7\xb7\xdf\xdb\x63\x63\x24\xe1\x7b\x84\x49\xe0\x70\x52\x77\xf4\xca\x69\x6e\x0c\xcd\x81\x0b\x7d\xcc\x49\xb6\x6a\xc7\x68\x8a\x7e\x22\x0e\x25\x25\x0a\xc1\x98\x49\x9f\xc5\xda\x15\x2c\x97\xbd\x78\xd3\xa2\xbf\xe3\x3e\x89\xba\x92\x1c\x2e\x32\x7c\x11\x5e\x32\xc7\x71\x63\x0c\xf2\xcc\x55\xe2\xcc\x70\x22\x5b\x72\x8e\x1d\x03\xa7\xac\x6d\x0d\x79\xd6\x34\xd0\xfe\xe1\xc3\x19\xe6\xa4\x62\x7a\x35\x2c\x82\xd3\x4e\x3a\x95\xdc\xe2\x21\x0f\xaa\x6e\x18\x51\x6a\xcb\x6b\xc2\x68\xd6\x09\xe3\x95\x8f\x61\x5c\x4a\x51\xd3\x0c\x33\xa0\xcd\x79\xd0\x79\x05\xd3\x37\x6a\x0a\xb9\x90\x50\xb8\xa9\xb8\xff\xef\xa7\xe3\x38\x24\xc4\xd0\x33\x40\xe4\xcb\xb1\xa3\xc6\x61\xbb\x57\x76\xd8\x10\xff\x69\x87\xc5\x4d\x0b\xd0\xb3\x59\xd4\x68\xf5\xcf\x5c\xd6\xe6\xbd\x9a\xd5\x68\xde\x76\xb1\x5e\xbb\x51\xb7\x85\x75\xdf\x73\x0e\x1c\x24\x3f\x6f\x43\x58\xf7\x8a\x79\x4f\x14\xde\xff\x2a\x9b\x1d\xd2\xc7\x42\xa6\xf0\xa5\x14\x9d\xd5\x4f\xd0\x4e\x9c\x7e\x6e\xf0\x10\xb6\xe0\x69\xfd\xde\x3c\xf6\xec\x70\xdd\x64\x66\x5a\x7c\x12\x07\x94\x1b\x52\x20\x83\x3e\x6f\xd4\xbc\xa8\xc1\x25\xf7\xee\xc4\xa3\xbb\xeb\x45\x4e\x66\xf3\xcb\xdd\x47\xef\x5c\xda\x50\xfb\x2b\xe5\x7c\x7a\x44\xf3\xe3\x92\x38\x2d\xed\x0a\x2d\x86\x9b\xe0\xda\x25\xf0\x95\xb0\x0a\x2f\x2d\x81\xc6\x68\xb5\x3b\x6e\xde\xbd\xdf\x03\xc1\xfb\xe7\xed\x8d\xdb\x27\x16\xbd\x64\x71\xfd\x07\x3b\xcb\xfd\x4e\x7b\xf1\x7f\x07\x00\x00\xff\xff\x0c\x06\xaf\xb9\xd2\x07\x00\x00")

func bindataTemplates08singlerelationertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates08singlerelationertmpl,
		"templates/08_single-relationer.tmpl",
	)
}



func bindataTemplates08singlerelationertmpl() (*asset, error) {
	bytes, err := bindataTemplates08singlerelationertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/08_single-relationer.tmpl",
		size: 2002,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589204436, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates09multirelationertmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x5d\x6b\xe3\x38\x14\x7d\xf7\xaf\xb8\x1b\xba\x89\x1d\x1c\xa7\xfb\x1a\xc8\x42\xb7\xec\x0c\x85\xb6\x0c\x6d\x99\x97\x10\x8a\xc7\xbe\x6e\x45\x65\xc9\xc8\x4a\x3a\x45\xe8\xbf\x0f\xb2\x64\x27\xce\x47\x93\x86\x14\xda\x61\xfa\xd4\x58\xd6\xb9\xe7\x1e\xdd\x73\x2c\xa5\x52\xcc\x08\x43\xe8\xe4\x33\x2a\xc9\x40\x20\x8d\x25\xe1\x0c\x45\x07\x06\x5a\x7b\x4a\x0d\xe0\x84\xcf\x24\x8c\xc6\x10\x55\x4f\x86\x43\x38\xe7\x79\x41\x28\x82\x24\x39\x42\xf2\x88\xc9\x13\x64\x5c\x80\x7c\x44\xc8\xe3\xa2\x20\xec\x21\xba\x32\x68\x37\x0d\x18\x10\x26\x51\x64\x71\x82\x40\xf2\x82\x62\x8e\x4c\x56\x4b\x91\x37\x8f\x05\xdc\x6f\xdd\x37\x86\xae\x52\xd1\x75\x9c\xa3\xd6\x4a\x7b\xa6\xfa\x59\x9a\xd6\x2f\x5c\xf1\x14\xe9\x02\xb1\xdc\x5d\x3e\xf2\xb2\x19\x4b\xc0\x57\x2a\xba\xc1\x04\xc9\x1c\x85\xd6\xd0\x6f\x6a\x04\x6b\xf0\x7e\x2d\x09\xf4\x6b\xf4\x5b\x29\x66\x89\xfc\x42\x90\xa6\x21\xe4\x15\x87\xa6\xb0\xf9\x15\x00\x0a\xc1\x05\x28\x0f\x00\xa0\x7c\x26\x32\x79\x84\x1a\x26\xba\x60\x29\xfe\x9c\x9c\x4e\xdd\xb2\x52\x22\x66\x0f\x08\x27\x4d\x1d\x23\x75\x4d\xa1\x34\x9a\x2b\x45\xb2\xc5\x7a\x74\x51\xde\x52\x92\x60\x75\x1a\x06\x21\x89\x4b\x04\xa5\x4e\xda\x15\xb4\x1e\xc1\x70\xd8\x7a\x6e\x5b\xac\xf6\xd8\xca\x0b\x50\xb3\x64\x0a\xfb\x92\x5f\xf2\x67\x14\xe7\x71\x8e\x74\xa9\xe6\x7f\x71\x89\x77\x2f\x05\x06\x96\x4f\x6b\x9f\xd6\x21\xf0\x27\xb3\xbb\xd2\x22\xf2\xfb\xcb\x45\xeb\x9d\x5a\x07\x4d\x65\x92\xc1\x5f\xfc\xc9\x09\x50\xff\x09\x94\x33\xc1\xac\x74\x65\x74\x8d\xcf\x99\x5f\xab\x7a\x4e\xe3\xb2\xbc\x60\xf3\x98\x92\xe6\x70\xbe\xc7\x74\x86\x21\x74\x0a\xc1\xe7\x24\xc5\x14\x88\x5d\x87\xb9\x59\x00\xf9\x52\xe0\x08\x7a\x7f\xdf\xf5\xa0\x19\xce\xcc\x9c\xd8\x08\x7a\xeb\x9a\xf4\x3a\xee\x20\x17\x1c\x97\x75\x5a\x91\xff\x1b\xaf\xe6\xa9\x39\x00\xd7\x92\x52\xc6\x29\x4b\x73\x15\xad\x17\x82\xf1\x18\x18\xa1\x2b\xad\x4b\xcc\x0b\xa3\xdf\xf2\xfb\x56\x33\xa5\x5b\x2f\xee\x57\x02\xba\x06\x70\x63\x27\x80\x2c\x6d\xf1\xde\xda\x9c\xd6\x7d\xa5\x90\xa5\xd5\x71\xef\x53\x34\x2e\x0a\x64\xa9\xbf\x0d\xf0\x6d\x78\xa1\x25\xc6\xb8\x6c\x61\xfd\x4f\x31\xdf\x84\xd7\x1e\xc7\xc0\x19\xcb\xf5\xda\xfc\x53\x3d\x4e\x31\x8b\x67\x54\x8e\xbc\x03\xe7\xce\xd9\x7e\x7d\xee\x6a\x0e\x6e\xea\x9a\x44\xac\xf2\xa1\xd7\x24\xcc\xca\xa8\x59\x52\x8e\x03\x23\xd4\xb3\x21\xf7\x15\x65\x2b\x85\xca\x23\xa7\xdc\x1a\xfe\xeb\x31\x17\x80\x9f\x5b\x1a\x93\x69\x2b\xea\x42\xa3\x9b\xd5\x2e\xf8\xf8\x79\xb7\x02\xbb\x34\x4d\x2d\x4f\x98\xa3\xbb\xaf\x93\x7d\x34\x06\x4b\x78\x2f\x1b\xb4\x7d\xed\x34\x6b\xbc\x61\x7f\xbf\x1a\x35\x03\x40\x5a\xe2\x1a\x1d\xf2\x2e\x3c\xba\xfe\x3e\x60\x13\x32\x0d\xb6\x92\x35\x06\x3c\xc4\x6e\x8c\xd8\xd9\x39\x9e\xe7\x4a\xeb\xb9\xaa\x37\xeb\xc1\x4e\xd8\xbc\x60\xf2\x64\xa9\xcb\x0d\xde\xab\x35\xd9\xee\xc1\x33\xf9\xce\x26\x3c\x93\xbb\x2e\x1b\xc4\x4c\xba\x29\xb1\x30\xe4\xef\x63\xc7\xa3\x7f\x56\x0f\x19\xb5\x8a\x7c\x08\x1d\xab\xb4\xb9\xf9\xf2\x0c\x0a\x5e\x96\xe4\x07\x45\xeb\xc0\x08\xae\xdc\x8c\x39\x6a\x2e\xd8\x43\xa8\x4e\x69\x43\xcf\x9d\xcd\xf6\x59\xfd\x16\x93\xcc\x1d\xf0\xbf\x40\x91\x1d\xe9\x4b\x1a\xc0\x00\xfe\xf9\x54\xc2\x38\x76\xbb\x2f\x00\xdd\x46\x86\x6d\x42\xf9\x6f\x51\x6a\x3b\x4c\xe0\x50\x26\x55\xf3\x53\x1b\x12\x9f\x23\xf4\x56\xda\x7e\x6b\xf0\x5d\x22\x7b\xbf\xd0\xbb\x44\xb6\xf3\xda\x41\x98\x0c\xff\x04\x5a\x7b\x8c\x4e\x17\x03\xb8\x2b\x52\xdc\x8e\x23\xc6\xc9\xc1\xc3\x7f\xfa\x01\xbe\xf7\xda\x73\xad\xfe\x0a\x00\x00\xff\xff\x98\xbf\x73\xcd\xf8\x10\x00\x00")

func bindataTemplates09multirelationertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates09multirelationertmpl,
		"templates/09_multi-relationer.tmpl",
	)
}



func bindataTemplates09multirelationertmpl() (*asset, error) {
	bytes, err := bindataTemplates09multirelationertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/09_multi-relationer.tmpl",
		size: 4344,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589214594, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/00_imports.tmpl":                bindataTemplates00importstmpl,
	"templates/01_initialize_collections.tmpl": bindataTemplates01initializecollectionstmpl,
	"templates/02_collection.tmpl":             bindataTemplates02collectiontmpl,
	"templates/03_collection-structure.tmpl":   bindataTemplates03collectionstructuretmpl,
	"templates/04_collection-builder.tmpl":     bindataTemplates04collectionbuildertmpl,
	"templates/05_model.tmpl":                  bindataTemplates05modeltmpl,
	"templates/06_primary.tmpl":                bindataTemplates06primarytmpl,
	"templates/07_fielder.tmpl":                bindataTemplates07fieldertmpl,
	"templates/08_single-relationer.tmpl":      bindataTemplates08singlerelationertmpl,
	"templates/09_multi-relationer.tmpl":       bindataTemplates09multirelationertmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"00_imports.tmpl": {Func: bindataTemplates00importstmpl, Children: map[string]*bintree{}},
		"01_initialize_collections.tmpl": {Func: bindataTemplates01initializecollectionstmpl, Children: map[string]*bintree{}},
		"02_collection.tmpl": {Func: bindataTemplates02collectiontmpl, Children: map[string]*bintree{}},
		"03_collection-structure.tmpl": {Func: bindataTemplates03collectionstructuretmpl, Children: map[string]*bintree{}},
		"04_collection-builder.tmpl": {Func: bindataTemplates04collectionbuildertmpl, Children: map[string]*bintree{}},
		"05_model.tmpl": {Func: bindataTemplates05modeltmpl, Children: map[string]*bintree{}},
		"06_primary.tmpl": {Func: bindataTemplates06primarytmpl, Children: map[string]*bintree{}},
		"07_fielder.tmpl": {Func: bindataTemplates07fieldertmpl, Children: map[string]*bintree{}},
		"08_single-relationer.tmpl": {Func: bindataTemplates08singlerelationertmpl, Children: map[string]*bintree{}},
		"09_multi-relationer.tmpl": {Func: bindataTemplates09multirelationertmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
