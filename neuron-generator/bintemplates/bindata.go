// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/00_imports.tmpl
// templates/01_initialize_collections.tmpl
// templates/02_collection.tmpl
// templates/03_collection-structure.tmpl
// templates/04_collection-builder.tmpl
// templates/05_model.tmpl
// templates/06_primary.tmpl
// templates/07_fielder.tmpl
// templates/08_single-relationer.tmpl
// templates/09_multi-relationer.tmpl

package bintemplates


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplates00importstmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x2d\xc8\x2f\x2a\x29\x56\x52\xd0\xad\xad\xe5\xaa\xae\xd6\x55\xc8\x4c\x53\xd0\xf3\x84\x08\x82\xc5\x20\x0a\x14\x34\xb8\xaa\xab\x8b\x12\xf3\xd2\x53\x15\x54\xa0\x22\x56\xb6\x08\x85\xb5\xb5\x0a\x0a\x0a\x0a\x4a\xd5\xd5\x50\xc9\xda\x5a\x25\xae\xea\xea\xd4\xbc\x14\x90\x11\x9a\x60\x73\xa1\x1c\x18\xbb\xb6\x16\x10\x00\x00\xff\xff\x08\x20\xfd\xe4\x84\x00\x00\x00")

func bindataTemplates00importstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates00importstmpl,
		"templates/00_imports.tmpl",
	)
}



func bindataTemplates00importstmpl() (*asset, error) {
	bytes, err := bindataTemplates00importstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/00_imports.tmpl",
		size: 132,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589199652, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates01initializecollectionstmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x31\x93\xda\x30\x10\x85\x7b\xfd\x8a\x17\x2a\xc8\x04\xd3\x93\xa1\x02\x0a\x1a\x48\x41\x97\xc9\x30\x8a\xbd\x26\x9a\xc8\x2b\xcf\x5a\x90\x70\x3b\xfa\xef\x37\x02\x0e\xbb\x38\xae\x39\x15\x1e\x7b\x9f\xdf\xea\x7b\x4f\xb5\xa2\xda\x31\x61\xe4\xd8\x45\x67\xbd\x7b\xa1\x43\x19\xbc\xa7\x32\xba\xc0\xdd\x28\x25\x33\x9b\x61\x19\x2a\xc2\x91\x98\xc4\x46\xaa\xf0\xfb\x02\xa6\x93\x04\x9e\xde\x67\x41\x0a\xac\x76\xd8\xee\xf6\x58\xaf\x36\xfb\x22\x7b\xf6\x7f\x5c\x87\xda\x79\xc2\x3f\xdb\x0d\xcc\x36\xce\xb3\xac\x3a\x45\x74\x0d\x75\xd1\x36\x2d\xa6\x29\x99\xd6\x96\x7f\xed\x91\xa0\x5a\xfc\xb8\xbd\x6e\x6d\x43\x29\x19\xa3\x1a\xa9\x69\xbd\x8d\x99\xb3\x69\x83\xc4\x6e\x84\x22\x2b\xf1\xd2\x12\x06\xc0\x9b\x47\x0a\x41\x7d\xe2\x72\xac\xea\x6a\x14\xeb\xff\x91\x84\xad\x5f\x06\x8e\x92\x7f\x96\x94\x4a\x7c\x2d\x1f\x9f\x45\xaf\xa8\x12\x57\x29\x4d\x40\x22\x41\x8c\x39\x5b\x79\x72\x43\x87\x9f\xbf\xde\x57\x4c\x4e\x78\xe8\x07\xcb\xbe\x51\x0c\xda\x45\x1d\x04\xad\x84\xb3\xab\xa8\xc2\x80\xc6\x64\xf6\x27\x0b\x3e\x13\x69\x4c\x22\xb7\x5c\x13\xa8\x01\x70\x25\x38\x7c\x83\x1b\xf4\x36\x5f\x40\x2c\x1f\x9f\xf5\xda\xdd\x9d\xf9\xb8\x3a\x6f\xc3\x62\xe8\xff\x88\xef\x0d\xe4\xfb\xd5\xf6\x65\x01\x76\x7e\xb0\x2e\x1f\xa1\x78\x12\xce\xfa\x63\x9c\x4c\xff\xbc\xcb\xec\xbc\x49\x46\x15\xc4\x15\x52\x7a\x0d\x00\x00\xff\xff\x79\xca\x66\xcc\xc7\x02\x00\x00")

func bindataTemplates01initializecollectionstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates01initializecollectionstmpl,
		"templates/01_initialize_collections.tmpl",
	)
}



func bindataTemplates01initializecollectionstmpl() (*asset, error) {
	bytes, err := bindataTemplates01initializecollectionstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/01_initialize_collections.tmpl",
		size: 711,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589199652, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates02collectiontmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xbb\x4e\x03\x31\x10\x45\xfb\xfd\x8a\x2b\xf7\x71\x7a\x5a\x42\x41\x41\x42\xb1\x3f\xe0\xac\x6f\x82\x85\x1f\x2b\x7b\x56\x08\x8d\xe6\xdf\x51\x04\x12\x11\x05\xdd\x68\xce\x39\xd2\x55\x8d\xbc\xa4\x4a\xb8\xa5\xe5\xcc\x45\x52\xab\xce\x6c\xda\xef\xf1\xd8\x22\x71\x65\x65\x0f\xc2\x88\xf3\x27\x2a\xb7\xde\xea\xee\xe7\xd7\xba\xc7\xe1\x84\xe3\x69\xc6\xd3\xe1\x79\xf6\xb7\x66\x7e\x4b\x03\x97\x94\x89\x8f\x30\xee\xe2\x20\x0f\x37\xac\x0a\x49\x85\x43\x42\x59\x61\x36\xad\x61\x79\x0f\x57\x42\xd5\xbf\x7e\x9f\xc7\x50\x68\x36\x4d\xaa\xc2\xb2\xe6\x20\x84\x4b\x65\x6d\x5d\x86\x83\xff\x4b\x7e\x37\xef\x86\xf4\x6d\x91\xad\xd3\xc1\xbf\xb4\xc8\xfc\x8f\x7b\xde\x52\x8e\xec\x77\xa6\x2a\x58\x23\xcc\xbe\x02\x00\x00\xff\xff\xaf\xc9\x98\x0d\x10\x01\x00\x00")

func bindataTemplates02collectiontmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates02collectiontmpl,
		"templates/02_collection.tmpl",
	)
}



func bindataTemplates02collectiontmpl() (*asset, error) {
	bytes, err := bindataTemplates02collectiontmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/02_collection.tmpl",
		size: 272,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589199652, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates03collectionstructuretmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x54\x41\x6f\x13\x3d\x10\xbd\xef\xaf\x98\xaf\x87\x76\x37\xda\xcf\xe5\x1c\x29\x1c\x1a\x10\xe2\x50\x24\x40\xe2\x52\x55\xc8\xf1\x4e\xda\x11\x8e\x77\x71\xbc\x21\xc5\xf2\x7f\x47\xf6\x38\xc9\x26\xda\x94\x4a\x70\x24\x07\x47\x63\xcf\xbc\x37\xf3\xe6\x25\xde\x37\xb8\x24\x83\x70\xa1\x5a\xad\x51\x39\x6a\xcd\xff\x6b\x67\x7b\xe5\x7a\x8b\x17\x21\x14\xc5\xb2\x37\x0a\xc8\x90\x2b\x2b\xf0\x05\x00\xc0\xd7\x43\xee\x7b\x43\x8e\xa4\xa6\x9f\x68\xd7\x30\x03\xd9\x75\x68\x9a\xf2\x4c\x42\x9d\x60\x38\xf2\x5e\xcc\xf7\x49\xe2\x8b\xb4\x24\x17\x1a\x3f\xc8\x15\x86\x50\x15\xa1\x28\xae\xaf\xe1\xb9\x1c\xa0\x35\xb8\x47\x84\x03\x13\xf4\x6b\x6c\xc0\xb5\xf0\xbd\x47\xfb\x14\x8b\x6f\xdb\x06\xb5\xc8\xf9\xab\x14\x14\x1b\x69\x9f\xc7\x9d\x1c\xbf\xf2\x6d\x51\xb8\xa7\x0e\x61\xec\x09\x58\xad\x2c\x4d\xa2\x84\xc9\x4a\x76\x1d\x99\x07\xee\xe0\x73\x4a\x28\x86\x52\xfe\x5e\x83\xd2\x7b\x5a\x82\x78\xbb\x75\x68\x8d\xd4\xf3\xd6\x38\x1b\x73\x6d\x08\x0a\x26\x6a\x1f\x8a\xc3\x8b\xf7\x68\x9a\x10\x2a\x40\x6b\x5b\x9b\x1b\x5a\x31\x7b\x1d\x2f\x61\x3a\x03\x25\xde\xa1\x1b\xb4\x55\x5e\x9e\x08\x55\xa5\x32\x5a\xa6\x82\xff\x66\x60\x48\x67\xa8\xf8\xb1\xe8\x7a\x6b\xe2\x5b\xba\x0a\xe9\xf4\x1e\xce\x0d\x02\x21\xc0\x0c\x2e\xc7\x84\xf3\x89\x75\xba\xeb\x90\xa1\x32\xbe\x21\x9d\x3d\xf0\x31\x2d\x53\x59\x94\x0e\x79\xe3\xbc\xde\x65\x6b\x53\x74\xd2\xbd\x60\x8d\xcb\x63\xc2\x4f\xa8\x90\x36\x51\xbb\xf1\xf5\x56\x4c\x53\x36\x0b\x46\x17\x6f\x6e\x6a\x36\xcc\x1a\x84\x10\x93\x53\x89\x4e\x51\x52\xf5\x4d\x4f\xba\x49\x1c\x2c\x57\x74\x5a\x42\xbb\x65\xa0\xbb\x7b\xc6\x4e\xe1\x4e\x64\x8d\xa6\x64\xa2\x0a\x5e\xc3\xab\x81\xd2\xc3\xd2\x19\xac\xe4\x37\x2c\x8f\x10\xea\x61\x6d\xb5\x2f\x8b\xba\x50\x6e\x3e\xee\xdb\x4a\xf3\x80\xbb\x59\x0e\xe8\x27\x0c\x77\x74\x1f\x49\xf6\x9d\x1d\x76\xcb\xe7\x82\x67\x8b\x80\xcd\x82\xc7\x3d\x2b\xf1\xae\xbd\xe1\x00\x42\x88\x6a\xb8\xdf\x51\x43\x0c\x55\xf4\x99\x71\xba\xa3\x0e\x43\x3f\xcc\xdd\xf6\xe5\x96\x80\x1f\xe4\x1e\xa1\xb3\xed\x86\x1a\x6c\xe0\x4a\xb9\xed\x15\xc4\x1f\x10\x6e\xdd\x1f\xd9\x65\xee\xb6\xa5\x8a\x9d\x64\xac\x39\x7f\xd7\xf0\xcf\x46\x2f\xb7\x51\x16\xb1\x86\xbf\x68\xa7\x63\x1d\x47\xad\x94\xff\x2b\x7f\x05\x00\x00\xff\xff\x0d\x51\x43\xd8\xff\x06\x00\x00")

func bindataTemplates03collectionstructuretmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates03collectionstructuretmpl,
		"templates/03_collection-structure.tmpl",
	)
}



func bindataTemplates03collectionstructuretmpl() (*asset, error) {
	bytes, err := bindataTemplates03collectionstructuretmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/03_collection-structure.tmpl",
		size: 1791,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589199652, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates04collectionbuildertmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x4f\x6f\x1b\xb9\x0e\xbf\xe7\x53\xf0\x05\x0f\x98\x71\x10\x8f\xdf\xe1\xe1\x1d\x02\xe4\xd0\xe6\x35\x45\x81\x6e\x36\x9b\x2c\xf6\x52\xf4\x20\x8f\x38\x8e\xb6\x1a\xc9\x2b\x69\x92\x78\x07\xfe\xee\x0b\x52\x9a\x7f\xa9\x93\xa0\x9d\x1e\x7a\x49\x6c\x89\x22\x7f\xfc\x91\x22\x29\xb7\xad\xc4\x4a\x19\x84\xe3\xd2\x6a\x8d\x65\x50\xd6\x2c\xd7\x8d\xd2\x12\xdd\xf1\x7e\x7f\x74\xb4\x5a\x41\xdb\x16\x17\xfd\x66\xf1\x5b\x83\x6e\xf7\x36\x4a\xec\xf7\xa0\x3c\x84\x3b\x84\xbf\x68\x15\xd2\x41\x68\x3c\x4a\x08\x16\x4a\x87\x22\x20\x08\x23\x01\x1f\xb1\x6c\x02\x92\x3e\x92\x55\xe8\xa1\xb2\x8e\xcf\xb6\x6d\x71\x25\x6a\xdc\xef\x6b\x2b\x51\x17\x47\x61\xb7\xc5\x97\x8d\xfa\xe0\x9a\x32\x40\x7b\x04\x00\xbd\x51\x86\x50\x24\xa1\xa3\x08\xfd\xb6\xb4\x5b\x04\x87\xa1\x71\xc6\xc3\x46\xdd\xa3\x49\x50\x3d\xed\x14\x47\x55\x63\x4a\xc8\xa7\xc6\x6e\xb0\x44\x75\xcf\x86\x4e\x5e\x82\xb1\x88\xea\xf3\x05\x9c\x44\xdb\xd1\x5a\x44\x15\x6d\xc2\xba\x48\xf0\x8a\x24\x9b\x80\xbd\x73\xae\x87\x85\xce\x59\x47\x34\x8a\x00\xb6\x2c\x1b\xe7\x50\x82\x6c\x9c\x32\x9b\x31\xaf\xf4\x75\xeb\x6c\x89\xde\xcf\xc5\xfd\xce\xb9\x7c\x11\xed\x3e\x07\x97\x45\x12\xd8\x8b\xf0\xd8\x83\xa5\x80\x95\xd6\x04\x7c\x0c\x60\xab\x09\xa5\xdd\xd1\x99\xe0\x2e\xc2\x63\xbe\xe8\x6c\x14\x17\xc9\xd6\x33\x30\x59\xb8\x83\x69\x1b\x13\x26\x40\x4d\x53\xaf\xd1\x11\x4e\x4e\x2d\x50\xc6\x07\x61\xca\x94\x7b\x5b\x67\xef\x95\x44\x99\x32\x67\x2e\x6c\xb2\x9e\x2f\x20\x57\x26\xfc\xef\xbf\xa7\x91\xdd\xc5\xb3\xb8\xa3\x74\x87\x3c\xde\x13\x65\x3c\xba\xe0\xc1\xe0\xc3\x13\xc0\xa0\x4c\xb0\xec\x92\x0f\xd6\xcd\xce\xdb\x68\xef\xb5\x14\xe8\xa4\x12\xc8\x6b\x11\xca\x3b\xd8\xd2\x5f\x9c\xde\xa5\x88\xf5\x41\x85\x3b\xf0\x48\x36\x51\x42\xa5\x50\x4b\x0f\xca\x30\xea\xf8\x0d\xc3\x5c\xe0\x8c\xe1\x35\xdc\x49\x28\xc1\xbe\x54\x46\xf6\x49\x21\xb4\xa6\xca\xf2\x0b\x17\x9a\x58\x74\x22\xfa\x74\xfd\xea\xe4\x5d\xb0\x63\x07\xe7\xa2\x26\x08\x94\x19\x9f\x3e\x9f\x3c\x31\xfe\x24\x4d\xd8\x1a\xef\x7b\xde\x81\xb3\xf3\x91\x5f\x51\x0d\x0b\xaa\x8a\xb7\xff\x75\x0e\x46\xe9\x74\x78\xc4\x85\x51\x9a\xcf\xf3\xfa\x9e\xff\x26\x2f\xcf\xce\xa1\x16\x5f\x30\x42\x01\x46\x01\x04\x43\xa3\xc9\x47\xd6\x17\xd1\x0c\xdd\x12\x75\x9a\xe2\x7b\x76\x0e\x4e\x98\x0d\x8e\x51\x8e\x4c\x47\x03\x9f\xd4\x67\x38\x1f\x4b\x7c\x52\x9f\x8b\x7c\x6c\x6b\x31\x02\x95\xe0\xd6\xc9\x63\xa3\x74\x0a\xda\x7b\x1c\x2e\xb2\x57\x66\xa3\xf1\x70\xd8\xa6\x51\x9b\x84\x6c\xb5\x82\x0f\x15\x27\x5f\xba\x4a\x1e\x8c\x0d\x50\xd9\xc6\xc8\x98\x93\x8d\xe1\x70\x4d\xeb\x30\x15\x8b\x52\x0b\xef\x63\x14\xff\x10\xba\xc1\x2b\x7b\x83\xbe\xd1\xb3\xb3\xf7\x3d\x72\x81\x78\x25\x09\x18\xee\x81\xf0\xf3\xe9\xef\x8c\xfe\x98\xe8\x14\x8e\x01\x01\x27\xc0\xc0\xfd\xff\x51\x63\x40\x90\xfc\xef\xf0\x95\xb9\x27\x56\x3c\x54\xce\xd6\x43\x51\x7a\x21\x16\xf3\x68\x8b\x80\x5e\xbb\xf5\x9d\x54\xf2\xe2\x8d\x94\x97\x4a\x07\x74\x97\x54\x7a\x40\x48\x19\x5b\x42\x56\xf1\x6a\x06\xa9\x9e\xfe\x40\x9c\x53\x93\x79\x34\x04\x27\xa3\xb5\x14\xfc\x17\x74\xa4\x91\xa6\xf7\xea\xa0\xce\xc5\x84\x81\xbe\xce\xb1\xb9\x38\x72\xf9\x54\x99\x7b\x6f\xb9\x38\xf7\x0d\x2f\x8b\x01\xcc\xe6\x17\x36\xd2\xde\x79\xea\x03\x8d\x2c\xa7\x5d\x76\x14\x45\xa1\x4c\x40\x57\x89\x12\xdb\xfd\xb7\xbb\x3e\x51\xde\x69\x2d\x8a\xe2\x6b\xef\x8f\xda\x36\x95\xa6\x7f\x3b\xd4\x82\x2f\xf5\xd9\x39\x14\x37\xe9\x8b\x87\xfd\x9e\xeb\x81\x29\x75\x23\xb1\x6d\x7b\x31\x1a\x60\xe3\x62\x97\xb1\x59\xb7\x95\x75\xbd\xab\x4f\xfe\x8b\xfd\x7e\x54\x5c\xde\x68\x6d\x1f\x90\x5a\x4b\x67\x24\xd8\x4e\xd9\x19\x09\xc0\x12\xda\x76\x40\xd4\x5d\x35\x3e\x6b\xc0\x6e\x69\x51\xe8\xc1\xe0\x65\xea\x91\x19\xc4\x91\xdc\x8f\x3a\x27\xe9\x4e\x1e\x27\x54\xc9\xd2\x60\x7f\x6e\x2c\x7b\x72\x96\x23\x16\x97\xfb\x7d\x4e\x2b\xc1\x7e\xb4\x0f\xe8\x2e\x44\x8d\x7a\xba\xdd\xa1\xa6\x70\xc7\x04\xf8\xf6\x48\x27\xd3\xf9\xf1\x24\x32\xc7\xa7\xf0\x94\x9a\x43\xd1\x6f\x5b\x34\x32\xbd\x54\x3e\xaa\x5a\x05\xf0\x18\x22\x77\xb5\x78\x54\x75\x53\x8f\xc6\x40\xbb\xfe\x13\xcb\xe0\xd3\x79\x94\xb0\xde\xb1\x24\x0f\x09\x69\xb8\x3e\x25\x4d\x37\x93\x9e\xa0\xaa\x51\xad\xe0\x97\x03\xdc\x09\x2a\x8d\x0e\x85\xdc\x81\x54\x55\x85\x0e\x4d\x00\x7e\xba\xd8\x0a\xb6\x62\xa3\xcc\x0f\x09\x0b\xbb\x94\x6b\x76\x8c\x27\xcb\x6f\xa7\x77\xa4\xe2\x60\xe5\xf8\xb5\xaa\x28\x80\x3d\x6d\xb1\x74\x38\x6e\x79\x99\x07\xcb\xdb\x05\x7c\x08\xe0\xc5\x8e\x53\xd1\x7f\x51\x5b\x10\x1e\x6a\x61\x76\x89\xd3\x6c\xd4\x0e\x1c\x6e\xad\x57\xc1\xba\x1d\xa9\x5f\x63\x45\xdd\x61\x8d\x1b\x65\x0c\x3d\x62\x86\x5c\x8e\xc2\xdc\x5a\x21\x8b\x30\x32\xf8\x4f\xf7\xa6\xf4\x74\x61\x84\x07\x5b\xab\x10\xf8\x20\xd5\xef\x4e\xac\xd4\xa2\xf1\x58\xfc\x54\xc1\x8a\xd8\xf2\xc8\xd8\xf7\x86\x6b\xa2\xe4\x60\xc0\xae\xc5\x06\x6f\xd5\xdf\xd8\x17\x8a\xc1\x03\xfa\x88\xe0\x69\x73\xd9\xe7\xbf\xa8\xf9\x65\x64\xab\x21\xef\xd3\x45\x38\x4c\xdf\x98\xba\x8e\x36\xa6\x70\x6c\xc8\x56\x31\x37\x23\xdc\xeb\x61\x83\x68\x9d\x3f\xe7\x47\x0f\xf3\x6d\xe7\xea\x77\x92\xf9\x95\xa2\x67\x09\xbd\x8a\x45\x62\x5c\x7b\x9f\xd2\x1a\xeb\xc8\xcf\xcc\x59\x74\x82\x9d\x4d\xfe\xcc\xe0\xed\x2b\x65\xcf\xcc\x1d\xdc\xa0\xfa\x01\x6b\x68\x58\x7c\x87\x89\x10\xaa\x0d\xfd\x03\x70\xb5\x82\xdf\x07\xb1\x5a\xec\x60\x8d\x20\xa0\x16\xdb\xad\x32\x9b\xe2\x96\x7f\xda\x49\x43\x9b\x87\x07\xd4\x9a\xfe\xb3\x78\xe6\xe1\x0a\x1b\x67\x0d\xb7\xd2\xbc\x6b\x37\xd6\x91\x52\xb2\x36\x3e\x3c\x91\x99\x3f\xe8\x10\xda\x3c\x81\x9e\xd1\xea\x26\x8a\x0e\x0e\x33\xab\x15\xdc\x5a\x17\x06\x42\x3d\x7d\xeb\x9f\xd3\xc1\x4e\x7e\xc0\x82\xb7\x3b\x4a\x59\xd1\xe8\x24\x43\xc5\xd3\x3a\x89\x0e\x89\xbf\x12\x8d\x24\x56\xe1\x83\x89\xab\x5c\xbd\x49\xa1\xc4\x6e\x93\x2c\x0a\x29\x21\x5b\x66\x5d\xad\xee\xe3\x08\x86\x58\x54\x05\x16\x90\x2d\x95\xcc\x0a\x8e\x5d\xd4\x64\xab\x71\xbc\xb9\x55\xe3\x10\x77\xb5\x31\xaa\x52\x25\xff\x78\x91\x24\xc9\x2e\x95\x71\x3e\x3e\x99\xa1\x86\x9c\x21\x99\x6e\x7a\x2a\xae\x9d\xaa\x85\xdb\x31\x67\x3c\x3e\x8d\x06\xbd\x08\x8f\xa6\xbc\x94\x80\x7b\x1a\x05\xe8\x26\xc6\xad\x82\x48\x14\x6b\xdd\x8d\x5c\xb0\xec\x36\x3a\x45\x68\x64\x3a\x94\x3e\xcd\xfc\x2d\xd0\xba\xf0\x03\x12\x64\xa4\xe6\xf0\xb4\x93\xd0\xfe\x13\x00\x00\xff\xff\x67\x52\xc9\x0b\xb9\x15\x00\x00")

func bindataTemplates04collectionbuildertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates04collectionbuildertmpl,
		"templates/04_collection-builder.tmpl",
	)
}



func bindataTemplates04collectionbuildertmpl() (*asset, error) {
	bytes, err := bindataTemplates04collectionbuildertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/04_collection-builder.tmpl",
		size: 5561,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589199652, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates05modeltmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xcd\x4a\xc3\x40\x14\x85\xf7\x79\x8a\x43\xf6\x49\xf6\x6e\xad\x82\x0b\x5b\xd1\xbc\xc0\xd5\x39\x89\x17\xe7\x27\x4c\xa6\x48\x19\xf2\xee\x32\x4d\x09\x05\xb5\xbb\xcb\xf9\xbe\x73\x36\x37\xe7\x06\x86\x83\x7a\xa2\x76\xc1\xd0\xd6\x68\x96\xa5\xea\x3a\xdc\x07\x43\x8c\xf4\x8c\x92\x68\xf0\x7e\x82\xe7\x31\x06\xdf\x5d\xb2\x10\x5b\xec\x0e\xd8\x1f\x7a\x3c\xec\x9e\xfa\xb6\x74\xfa\x4f\x9d\x31\xa8\x25\xbe\x65\xbe\x2a\x4b\xba\x2b\x38\x67\x24\x75\x9c\x93\xb8\x09\xcb\x52\x55\x93\x7c\x7c\xc9\x48\xe4\xdc\xbe\xac\xe7\x5e\x1c\x0b\x29\x2a\xdd\x64\x25\x11\xb5\xba\x29\xc4\x34\xd7\x68\xf1\x8b\x4d\x51\x9d\xc4\xd3\x85\xe5\xac\x03\xda\x47\xa5\x35\x8c\x6b\x70\xe5\x0e\x6b\xbe\xb9\x0d\xe8\xcd\xd6\x7a\x53\x3f\x5a\xbe\xd2\x4a\xd2\xe0\xff\xa8\xcf\x67\xa1\x89\x9b\xf1\xcf\xd0\xf3\xd1\x26\xbd\xb1\xe3\x0a\xbf\x3d\x73\xbe\xca\x27\x7e\x02\x00\x00\xff\xff\xeb\xde\xbe\x97\xa0\x01\x00\x00")

func bindataTemplates05modeltmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates05modeltmpl,
		"templates/05_model.tmpl",
	)
}



func bindataTemplates05modeltmpl() (*asset, error) {
	bytes, err := bindataTemplates05modeltmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/05_model.tmpl",
		size: 416,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589199652, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates06primarytmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\x5b\x6b\x1b\x39\x14\xc7\xdf\xfd\x29\x0e\x26\x1b\xcf\x2c\xb1\xb2\xfb\x9a\xc5\x0f\xdb\x40\x43\x28\x0d\x21\x09\x2d\xf4\xa5\xa8\x33\x67\x6c\x91\x19\x69\x22\xc9\x93\x1a\xa1\xef\x5e\x24\xcd\xd5\x19\x5f\x1a\x12\x68\x5e\x62\x34\x47\xff\xf3\xd3\xff\x1c\x5d\x8c\x49\x31\x63\x1c\x61\x5a\x4a\x56\x50\xb9\x99\xc2\xdc\xda\x89\x31\x73\x38\x11\x6b\x0d\x17\x0b\x20\x7e\xe4\xfc\x1c\x2e\x45\x51\xb2\x1c\x41\xb3\x02\x21\x59\x61\xf2\x08\x2c\x03\x63\xc8\x0d\x2d\xd0\x5a\x60\x45\x99\x63\x81\x5c\x2b\x28\x68\x59\x32\xbe\x24\x9f\x45\x8a\x39\x30\xae\x51\x66\x34\x41\x32\xa9\xa8\x84\xef\x5b\x9f\x17\x70\xda\x8a\x18\x3b\x71\xa9\x6e\x70\x2d\x05\xbf\x14\x79\x8e\x89\x66\x82\xbb\x8f\x47\xe8\x43\x81\x7a\x25\x52\xe2\x24\xee\x50\xaf\x25\x57\xa0\x57\x08\xdc\x4d\x17\x99\xff\x9d\xb4\xa2\x90\x09\xe9\x87\x66\x6d\xfa\x19\x99\x64\x6b\x9e\x40\x64\x0c\xb9\xc3\x04\x59\x85\xd2\x5a\xf8\xbb\x0d\x88\x47\xd1\xa2\x18\x94\x96\x8c\x2f\xc1\x4c\x00\x00\xa4\xcf\x0d\x53\x63\xc8\x30\xd0\xda\xe9\x24\xac\xf0\x5a\xdd\x06\xc3\x3f\xe1\xe6\x1b\x4a\xd1\x5f\xdd\xd3\x1a\xe5\x66\xe7\xda\x0e\x01\x6e\x2b\x47\x31\xfc\x10\x22\x1f\xa2\x19\x43\xea\x28\x72\xad\x5c\x94\xb5\x35\xd8\x15\xea\x6e\xfe\x17\x9a\xaf\xf1\xed\xd0\x5e\x6a\x47\x71\x27\x63\xec\x0b\xc6\x4e\x87\xf4\x88\x83\xdc\x18\xaf\x5b\xc9\x7b\x32\xb7\xfa\x07\xb8\x1b\xd2\x2b\xd4\x03\x73\xef\xfb\x62\x6f\xc7\x78\xff\xd2\xd7\x2a\xb8\xd0\x31\xc6\x80\x52\x0a\x59\xa3\x1a\xc3\x32\xe8\xb5\xc0\xad\xf0\xa1\x7e\xab\xbb\xef\x2c\x83\xa0\xb0\x58\x00\x67\x4d\xf3\x84\x99\x7b\xab\x02\x3e\xbe\x8d\xae\x2d\x69\x86\x6c\x9d\x1c\x79\x3a\x48\x75\x06\xe2\xd1\x9d\x35\x3e\x27\x89\x7a\xaa\x0f\x9b\xd2\x2d\xf1\x3f\x17\xf0\x3b\x10\xd5\x2e\x84\x43\x2b\xb7\x80\xb9\xc2\x03\x54\x1f\xa8\xc2\xd7\x92\x9d\xee\x41\xab\x7d\x31\x46\x52\xbe\x44\x38\x79\x96\xb4\x2c\x31\xf5\xc7\x70\x23\xf4\x35\x8c\xb9\xf4\xea\x28\xea\x46\xe5\x35\xb0\x3b\xdc\xb2\xf6\xd4\xc3\x5a\x5b\x8d\x54\xd4\x8e\x18\xfd\x7f\xae\x51\x72\xaa\x71\xc8\xed\xae\x15\x7f\x93\xd0\xe6\x3b\x68\x1f\xe0\xce\xe6\x25\xab\x90\x43\xc6\x30\x4f\x49\x27\x89\x4f\x10\xe5\xc8\x77\x49\xc7\xf0\xef\xfe\xd6\x62\x3c\xc5\x9f\x3b\xc1\xfe\x19\x73\x89\x65\xfe\x36\xdc\xd3\x35\xee\x4f\x63\x51\xba\x4c\xc6\x0c\x82\xbb\x5e\x89\xaa\xb8\x27\xea\x83\x06\xf6\x0f\xa6\x75\xfd\xe2\x74\x7b\xf3\xe6\xa1\xd4\xfd\xcc\xc7\x8b\x6d\x8d\x8f\x71\xcd\xc1\x17\xf6\xd0\x16\xde\xc2\x50\xcf\x4c\x27\xab\xe0\xb2\x53\xed\x59\xee\x0a\x1a\xb7\xe7\x4e\xdd\xd9\x5d\xbd\xfb\xbd\xbd\xa3\x4b\x12\xaa\xd0\xa1\xb7\x93\xac\xbd\x78\x8f\xf2\x34\xf0\x7f\x6a\x99\xc6\xf8\x0e\x94\x6b\x6b\x67\xd6\xbb\xb6\xfe\x37\xb2\x4f\xef\x13\xca\x79\xcf\xb9\xe3\xee\x62\x3f\x2d\xf0\xc5\xe3\xfd\x51\xeb\xf8\x3b\x48\x91\x1b\x7c\xce\xa2\xe6\x11\x77\x99\x53\xa5\xae\x79\x45\x73\x96\x7e\x74\x9b\xdd\xdf\x60\x67\xee\x49\x2a\x2a\x96\x62\x0a\x2c\x7c\x0c\x0d\x75\x01\xb3\xbf\x1e\x66\xed\xe3\xad\x7e\xb7\x86\x63\xc2\x8f\x16\xee\x16\x0d\x51\xd3\xb3\xd6\x97\x2a\x88\x0e\x16\xd2\x63\xf5\x76\x84\x87\x6f\x6d\xd8\xaf\x00\x00\x00\xff\xff\x93\x1e\x21\x1b\x1b\x0b\x00\x00")

func bindataTemplates06primarytmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates06primarytmpl,
		"templates/06_primary.tmpl",
	)
}



func bindataTemplates06primarytmpl() (*asset, error) {
	bytes, err := bindataTemplates06primarytmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/06_primary.tmpl",
		size: 2843,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589210748, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates07fieldertmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x0c\x8c\xec\x46\x32\x1c\x79\x7b\x75\x91\x43\x77\x8b\xb6\xb9\xec\x16\x75\xd0\x02\x2d\x8a\x82\x2b\x8d\x12\x62\x29\x4a\x25\x69\xa5\x01\xc1\xff\x5e\x90\xfa\xb0\x24\xcb\x92\x8c\xc4\x6d\x82\xd5\x51\x1c\xce\xbc\x79\x6f\x66\x48\x6a\x1d\x63\x42\x39\xc2\x22\xa1\xc8\x62\x14\x0b\xb8\x32\xc6\xd3\xfa\x0a\x2e\xb2\x9d\x82\xcd\x35\x84\xee\xcf\x7a\x0d\x1f\xb2\x34\xa7\x0c\x41\xd1\x14\x21\xba\xc7\xe8\x0b\xd0\x04\xb4\x0e\x3f\x92\x14\x8d\x01\x9a\xe6\x0c\x53\xe4\x4a\x42\x4a\xf2\x9c\xf2\xbb\xf0\x87\xd2\x29\x50\xae\x50\x24\x24\xc2\xd0\x2b\x88\x80\xbf\x0e\x0c\xae\xe1\x6d\xe3\x48\x1b\xcf\x86\xfb\x11\x95\x5b\xfd\x1d\x45\xf6\x2b\x61\x3b\x9c\x17\x40\x7a\xc9\x8e\x47\xe0\x6b\x1d\xfe\x82\x11\xd2\x02\x85\x31\xb0\x6c\xbc\x07\x87\x8e\x7d\x97\x3b\x2c\x6b\xa7\x5b\x25\x76\x51\x69\x13\x80\xdf\xb8\xd6\x66\x05\x28\x44\x26\x02\xd0\x1e\x00\x80\x7c\xa0\x2a\xba\x07\xb7\x3b\xbc\xe1\x31\xfe\xf3\xc7\xbb\x3f\xab\x35\xad\x05\xe1\x77\x08\x17\xa5\x6f\xcb\xa3\x73\x28\x1d\x9b\xd6\x22\x22\x12\x41\xeb\x8b\xd6\x76\x63\x36\xb0\x5e\xef\x7f\x96\x88\x9d\xb5\xfd\x04\xaa\x9d\xe0\xfb\x65\x9b\x80\x31\x2b\xe0\x94\x55\x31\x91\xc7\x8d\xff\x18\x13\xb2\x63\x6a\xd3\xdf\xce\x29\xab\xf2\x90\xe1\x47\x7c\x48\xfc\x3a\xed\x0f\x8c\x48\x79\xc3\x0b\xc2\x68\xec\xb0\x3a\x72\x56\xb0\xc8\x45\x56\xd0\x18\x63\xa0\xe5\x62\x99\x31\x70\x92\xe2\x06\x2e\xdf\xc8\xcb\xc5\x0a\xf6\x80\xfd\x20\x70\x21\x8d\x57\xea\x78\x23\x1b\xb6\x67\x96\xc8\x94\x80\x2d\x8f\xe3\xd2\x7d\xce\x32\xf6\xc2\x34\xbb\x91\x47\x55\x2b\x37\x55\x1b\x12\xc2\x24\x9e\x5d\xa7\x52\xa1\xed\xb9\x3a\xed\xc0\xf1\xa8\x5c\x2e\xd7\xff\x49\x26\xad\xed\xb8\x6b\xe5\x11\xf6\x2c\xe1\xba\xdf\x77\x27\xb4\xdc\x7f\xd2\x6d\xdd\x16\xf7\x9a\x21\xfa\x13\x91\xf7\xe4\x33\xc3\x7d\x90\x67\x6a\xc3\x41\xdf\xaf\x65\x96\x6a\x4d\x13\x68\x7a\xf2\xe7\xcc\x21\x6b\xfc\xd9\xcf\x9d\x6d\x93\x55\x71\x6d\xc9\xae\x70\x0e\x0d\xda\xba\xcb\xf7\x1a\x1d\x96\xcd\x21\x9e\xf7\x8f\x0a\xb7\x8c\x46\xd8\xb1\x69\xf9\x96\x4a\x50\x7e\xe7\x0f\x66\x61\xcc\xd2\xf9\x37\x66\x12\x7f\xd0\x05\x68\x8f\x7d\x64\xf2\x68\xd4\xa7\x86\x1b\x88\x66\xf7\x8d\x8c\xc1\xe7\x3a\xac\xca\xce\x81\x24\x13\x70\x47\x0b\xe4\x90\x66\x31\xb2\xc1\x7e\x5a\x41\xa7\xe4\x03\xaf\x7b\x1d\x79\xe6\x0e\x7a\x7d\x9d\xb3\x3f\xd1\xe6\x8a\xfd\xd2\xa5\xdd\x9e\x41\xda\xed\x4c\x69\x57\x50\x94\x51\xf7\xfa\x06\xe0\xa3\x10\xaf\x60\x3c\x96\xc8\x07\x47\xe0\x9c\xf3\xb4\x3d\x0b\x7a\x87\xd7\x9c\x89\x69\x01\xac\x20\xfb\x62\x13\x76\x48\x42\xbf\x89\x71\xfb\x98\x5b\x15\xbe\xb5\xcb\xa7\x03\x2b\x26\x61\x0d\xd3\xd3\x02\x67\x9f\x4b\xf5\x0b\x89\x2a\xa0\x12\x78\xc6\xaf\xf2\xca\xb0\x84\x3b\x2b\x93\xf7\x44\xe2\xd3\xb2\x79\x3b\x27\x9d\x8a\xdc\xa6\x94\x1e\x04\xc9\x73\x74\xc5\x54\xf9\xfb\xad\xfc\x63\xb1\xc8\x49\x15\xaa\xed\xc7\x40\x4f\xd5\x96\xfd\x14\xa6\xb9\x75\x3a\xc0\x84\x5f\x04\xa7\xb3\x60\xfd\xf5\x76\x0d\x1e\x75\x27\xdd\x04\xc7\x30\xf5\xeb\x75\x94\x7c\xd3\x29\xa9\xef\x98\x42\xc1\x89\xc2\x3e\xdb\xce\x08\xff\x06\x9f\x21\x1f\x36\x0e\xe0\x9b\x4e\xd4\xa6\x10\x49\x6d\x06\xca\xda\xb9\x79\xa9\xee\xb1\x3f\x01\x26\xaa\x92\xda\xd9\x31\x1c\x19\xde\xbd\x70\xb9\x8f\xdc\x6d\x4e\x12\xfc\x18\xa2\xf6\x4d\x66\x4c\xec\xf1\xab\x56\x35\xe5\x8b\x16\xe5\x56\xac\xa0\xc5\x68\xd3\xa1\xa4\x4d\x7e\xab\x4f\x7b\xa2\xb4\xdd\xd7\xc7\x40\x67\xab\x31\x9b\xaf\x56\xae\xc9\x31\xee\x18\x5b\x4e\x51\x36\x46\xc6\xf2\xc9\x6c\x1c\x16\x57\x35\x31\x3a\x16\xeb\x25\xdc\x7e\xfa\xfe\xd3\x06\x24\x2a\xd7\xd7\x32\x22\x9c\xa3\x00\x22\xeb\xb2\xb2\xa5\xe4\x32\x5a\xae\x3b\xac\x1e\xbc\x5a\xe1\x79\x5f\xae\x36\xae\xbd\x8e\xdd\x5e\x36\x43\xa7\xba\xb8\xbd\x91\x8b\xea\xfe\x33\xf4\xa4\x85\xce\x74\x1c\x7c\x2b\x9c\xfb\xd5\xdd\xba\x5b\x5a\xd8\xf5\xcd\xb2\x12\xb1\x14\x6c\xf6\x7b\xbc\xc9\xe1\xdf\x00\x00\x00\xff\xff\x03\xb7\xd0\xeb\x75\x15\x00\x00")

func bindataTemplates07fieldertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates07fieldertmpl,
		"templates/07_fielder.tmpl",
	)
}



func bindataTemplates07fieldertmpl() (*asset, error) {
	bytes, err := bindataTemplates07fieldertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/07_fielder.tmpl",
		size: 5493,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589214177, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates08singlerelationertmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6b\xdb\x30\x10\x7e\xcf\xaf\x38\x42\xd6\xc4\xc1\x71\xf6\x9c\x91\x97\x05\x36\x02\x5b\x19\x4d\xd9\xcb\x18\x43\xd8\xe7\x54\x54\x96\x8c\x24\x3b\x1b\x42\xff\x7d\x48\xb6\x95\xd8\xc9\xda\xac\xac\x30\x3f\xb5\xa7\xd3\xf7\xdd\x7d\xf7\xe9\x62\x4c\x86\x39\xe5\x08\x63\x45\xf9\x9e\xe1\x42\x22\x23\x9a\x0a\x8e\x72\x0c\x0b\x6b\x47\xc6\x2c\x60\x22\x2a\x0d\xab\x35\x24\x3e\xb2\x5c\xc2\x46\x14\x25\x65\x08\x9a\x16\x08\xe9\x03\xa6\x8f\x40\x73\x30\x26\xb9\x25\x05\x5a\x0b\xb4\x28\x19\x16\xc8\xb5\x82\x82\x94\x25\xe5\xfb\x64\xe7\xe1\xef\x02\x3a\x50\xae\x51\xe6\x24\xc5\x64\x54\x13\x09\x3f\xfe\x9c\xb9\x86\x9b\x00\x6d\xec\xc8\x15\xf0\x11\x75\x97\xf0\x59\x64\xc8\xfe\x96\x31\xaf\x78\x0a\x33\x63\x92\x3b\x4c\x91\xd6\x28\xad\x85\x79\x20\x89\xce\xf0\x67\x9d\x2c\x30\x0f\xf0\x5a\x56\xa9\xfe\x40\x91\x65\x11\xcc\xba\xa8\xcf\x8e\x01\xa5\x14\x32\x02\x33\x02\x00\x50\x07\xaa\xd3\x07\xe8\x20\x92\x2d\xcf\xf0\xe7\xb7\xb7\xdf\xdb\x63\x63\x24\xe1\x7b\x84\x49\xe0\x70\x52\x77\xf4\xca\x69\x6e\x0c\xcd\x81\x0b\x7d\xcc\x49\xb6\x6a\xc7\x68\x8a\x7e\x22\x0e\x25\x25\x0a\xc1\x98\x49\x9f\xc5\xda\x15\x2c\x97\xbd\x78\xd3\xa2\xbf\xe3\x3e\x89\xba\x92\x1c\x2e\x32\x7c\x11\x5e\x32\xc7\x71\x63\x0c\xf2\xcc\x55\xe2\xcc\x70\x22\x5b\x72\x8e\x1d\x03\xa7\xac\x6d\x0d\x79\xd6\x34\xd0\xfe\xe1\xc3\x19\xe6\xa4\x62\x7a\x35\x2c\x82\xd3\x4e\x3a\x95\xdc\xe2\x21\x0f\xaa\x6e\x18\x51\x6a\xcb\x6b\xc2\x68\xd6\x09\xe3\x95\x8f\x61\x5c\x4a\x51\xd3\x0c\x33\xa0\xcd\x79\xd0\x79\x05\xd3\x37\x6a\x0a\xb9\x90\x50\xb8\xa9\xb8\xff\xef\xa7\xe3\x38\x24\xc4\xd0\x33\x40\xe4\xcb\xb1\xa3\xc6\x61\xbb\x57\x76\xd8\x10\xff\x69\x87\xc5\x4d\x0b\xd0\xb3\x59\xd4\x68\xf5\xcf\x5c\xd6\xe6\xbd\x9a\xd5\x68\xde\x76\xb1\x5e\xbb\x51\xb7\x85\x75\xdf\x73\x0e\x1c\x24\x3f\x6f\x43\x58\xf7\x8a\x79\x4f\x14\xde\xff\x2a\x9b\x1d\xd2\xc7\x42\xa6\xf0\xa5\x14\x9d\xd5\x4f\xd0\x4e\x9c\x7e\x6e\xf0\x10\xb6\xe0\x69\xfd\xde\x3c\xf6\xec\x70\xdd\x64\x66\x5a\x7c\x12\x07\x94\x1b\x52\x20\x83\x3e\x6f\xd4\xbc\xa8\xc1\x25\xf7\xee\xc4\xa3\xbb\xeb\x45\x4e\x66\xf3\xcb\xdd\x47\xef\x5c\xda\x50\xfb\x2b\xe5\x7c\x7a\x44\xf3\xe3\x92\x38\x2d\xed\x0a\x2d\x86\x9b\xe0\xda\x25\xf0\x95\xb0\x0a\x2f\x2d\x81\xc6\x68\xb5\x3b\x6e\xde\xbd\xdf\x03\xc1\xfb\xe7\xed\x8d\xdb\x27\x16\xbd\x64\x71\xfd\x07\x3b\xcb\xfd\x4e\x7b\xf1\x7f\x07\x00\x00\xff\xff\x0c\x06\xaf\xb9\xd2\x07\x00\x00")

func bindataTemplates08singlerelationertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates08singlerelationertmpl,
		"templates/08_single-relationer.tmpl",
	)
}



func bindataTemplates08singlerelationertmpl() (*asset, error) {
	bytes, err := bindataTemplates08singlerelationertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/08_single-relationer.tmpl",
		size: 2002,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589204436, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplates09multirelationertmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x5d\x6b\xe3\x38\x14\x7d\xf7\xaf\xb8\x1b\xba\x89\x1d\x1c\xa7\xfb\x1a\xc8\x42\xb7\xec\x0c\x85\xb6\x0c\x6d\x99\x97\x10\x8a\xc7\xbe\x6e\x45\x65\xc9\xc8\x4a\x3a\x45\xe8\xbf\x0f\xb2\x64\x27\xce\x47\x93\x86\x14\xda\x61\xfa\xd4\x58\xd6\xb9\xe7\x1e\xdd\x73\x2c\xa5\x52\xcc\x08\x43\xe8\xe4\x33\x2a\xc9\x40\x20\x8d\x25\xe1\x0c\x45\x07\x06\x5a\x7b\x4a\x0d\xe0\x84\xcf\x24\x8c\xc6\x10\x55\x4f\x86\x43\x38\xe7\x79\x41\x28\x82\x24\x39\x42\xf2\x88\xc9\x13\x64\x5c\x80\x7c\x44\xc8\xe3\xa2\x20\xec\x21\xba\x32\x68\x37\x0d\x18\x10\x26\x51\x64\x71\x82\x40\xf2\x82\x62\x8e\x4c\x56\x4b\x91\x37\x8f\x05\xdc\x6f\xdd\x37\x86\xae\x52\xd1\x75\x9c\xa3\xd6\x4a\x7b\xa6\xfa\x59\x9a\xd6\x2f\x5c\xf1\x14\xe9\x02\xb1\xdc\x5d\x3e\xf2\xb2\x19\x4b\xc0\x57\x2a\xba\xc1\x04\xc9\x1c\x85\xd6\xd0\x6f\x6a\x04\x6b\xf0\x7e\x2d\x09\xf4\x6b\xf4\x5b\x29\x66\x89\xfc\x42\x90\xa6\x21\xe4\x15\x87\xa6\xb0\xf9\x15\x00\x0a\xc1\x05\x28\x0f\x00\xa0\x7c\x26\x32\x79\x84\x1a\x26\xba\x60\x29\xfe\x9c\x9c\x4e\xdd\xb2\x52\x22\x66\x0f\x08\x27\x4d\x1d\x23\x75\x4d\xa1\x34\x9a\x2b\x45\xb2\xc5\x7a\x74\x51\xde\x52\x92\x60\x75\x1a\x06\x21\x89\x4b\x04\xa5\x4e\xda\x15\xb4\x1e\xc1\x70\xd8\x7a\x6e\x5b\xac\xf6\xd8\xca\x0b\x50\xb3\x64\x0a\xfb\x92\x5f\xf2\x67\x14\xe7\x71\x8e\x74\xa9\xe6\x7f\x71\x89\x77\x2f\x05\x06\x96\x4f\x6b\x9f\xd6\x21\xf0\x27\xb3\xbb\xd2\x22\xf2\xfb\xcb\x45\xeb\x9d\x5a\x07\x4d\x65\x92\xc1\x5f\xfc\xc9\x09\x50\xff\x09\x94\x33\xc1\xac\x74\x65\x74\x8d\xcf\x99\x5f\xab\x7a\x4e\xe3\xb2\xbc\x60\xf3\x98\x92\xe6\x70\xbe\xc7\x74\x86\x21\x74\x0a\xc1\xe7\x24\xc5\x14\x88\x5d\x87\xb9\x59\x00\xf9\x52\xe0\x08\x7a\x7f\xdf\xf5\xa0\x19\xce\xcc\x9c\xd8\x08\x7a\xeb\x9a\xf4\x3a\xee\x20\x17\x1c\x97\x75\x5a\x91\xff\x1b\xaf\xe6\xa9\x39\x00\xd7\x92\x52\xc6\x29\x4b\x73\x15\xad\x17\x82\xf1\x18\x18\xa1\x2b\xad\x4b\xcc\x0b\xa3\xdf\xf2\xfb\x56\x33\xa5\x5b\x2f\xee\x57\x02\xba\x06\x70\x63\x27\x80\x2c\x6d\xf1\xde\xda\x9c\xd6\x7d\xa5\x90\xa5\xd5\x71\xef\x53\x34\x2e\x0a\x64\xa9\xbf\x0d\xf0\x6d\x78\xa1\x25\xc6\xb8\x6c\x61\xfd\x4f\x31\xdf\x84\xd7\x1e\xc7\xc0\x19\xcb\xf5\xda\xfc\x53\x3d\x4e\x31\x8b\x67\x54\x8e\xbc\x03\xe7\xce\xd9\x7e\x7d\xee\x6a\x0e\x6e\xea\x9a\x44\xac\xf2\xa1\xd7\x24\xcc\xca\xa8\x59\x52\x8e\x03\x23\xd4\xb3\x21\xf7\x15\x65\x2b\x85\xca\x23\xa7\xdc\x1a\xfe\xeb\x31\x17\x80\x9f\x5b\x1a\x93\x69\x2b\xea\x42\xa3\x9b\xd5\x2e\xf8\xf8\x79\xb7\x02\xbb\x34\x4d\x2d\x4f\x98\xa3\xbb\xaf\x93\x7d\x34\x06\x4b\x78\x2f\x1b\xb4\x7d\xed\x34\x6b\xbc\x61\x7f\xbf\x1a\x35\x03\x40\x5a\xe2\x1a\x1d\xf2\x2e\x3c\xba\xfe\x3e\x60\x13\x32\x0d\xb6\x92\x35\x06\x3c\xc4\x6e\x8c\xd8\xd9\x39\x9e\xe7\x4a\xeb\xb9\xaa\x37\xeb\xc1\x4e\xd8\xbc\x60\xf2\x64\xa9\xcb\x0d\xde\xab\x35\xd9\xee\xc1\x33\xf9\xce\x26\x3c\x93\xbb\x2e\x1b\xc4\x4c\xba\x29\xb1\x30\xe4\xef\x63\xc7\xa3\x7f\x56\x0f\x19\xb5\x8a\x7c\x08\x1d\xab\xb4\xb9\xf9\xf2\x0c\x0a\x5e\x96\xe4\x07\x45\xeb\xc0\x08\xae\xdc\x8c\x39\x6a\x2e\xd8\x43\xa8\x4e\x69\x43\xcf\x9d\xcd\xf6\x59\xfd\x16\x93\xcc\x1d\xf0\xbf\x40\x91\x1d\xe9\x4b\x1a\xc0\x00\xfe\xf9\x54\xc2\x38\x76\xbb\x2f\x00\xdd\x46\x86\x6d\x42\xf9\x6f\x51\x6a\x3b\x4c\xe0\x50\x26\x55\xf3\x53\x1b\x12\x9f\x23\xf4\x56\xda\x7e\x6b\xf0\x5d\x22\x7b\xbf\xd0\xbb\x44\xb6\xf3\xda\x41\x98\x0c\xff\x04\x5a\x7b\x8c\x4e\x17\x03\xb8\x2b\x52\xdc\x8e\x23\xc6\xc9\xc1\xc3\x7f\xfa\x01\xbe\xf7\xda\x73\xad\xfe\x0a\x00\x00\xff\xff\x98\xbf\x73\xcd\xf8\x10\x00\x00")

func bindataTemplates09multirelationertmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplates09multirelationertmpl,
		"templates/09_multi-relationer.tmpl",
	)
}



func bindataTemplates09multirelationertmpl() (*asset, error) {
	bytes, err := bindataTemplates09multirelationertmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/09_multi-relationer.tmpl",
		size: 4344,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1589214594, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/00_imports.tmpl":                bindataTemplates00importstmpl,
	"templates/01_initialize_collections.tmpl": bindataTemplates01initializecollectionstmpl,
	"templates/02_collection.tmpl":             bindataTemplates02collectiontmpl,
	"templates/03_collection-structure.tmpl":   bindataTemplates03collectionstructuretmpl,
	"templates/04_collection-builder.tmpl":     bindataTemplates04collectionbuildertmpl,
	"templates/05_model.tmpl":                  bindataTemplates05modeltmpl,
	"templates/06_primary.tmpl":                bindataTemplates06primarytmpl,
	"templates/07_fielder.tmpl":                bindataTemplates07fieldertmpl,
	"templates/08_single-relationer.tmpl":      bindataTemplates08singlerelationertmpl,
	"templates/09_multi-relationer.tmpl":       bindataTemplates09multirelationertmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"00_imports.tmpl": {Func: bindataTemplates00importstmpl, Children: map[string]*bintree{}},
		"01_initialize_collections.tmpl": {Func: bindataTemplates01initializecollectionstmpl, Children: map[string]*bintree{}},
		"02_collection.tmpl": {Func: bindataTemplates02collectiontmpl, Children: map[string]*bintree{}},
		"03_collection-structure.tmpl": {Func: bindataTemplates03collectionstructuretmpl, Children: map[string]*bintree{}},
		"04_collection-builder.tmpl": {Func: bindataTemplates04collectionbuildertmpl, Children: map[string]*bintree{}},
		"05_model.tmpl": {Func: bindataTemplates05modeltmpl, Children: map[string]*bintree{}},
		"06_primary.tmpl": {Func: bindataTemplates06primarytmpl, Children: map[string]*bintree{}},
		"07_fielder.tmpl": {Func: bindataTemplates07fieldertmpl, Children: map[string]*bintree{}},
		"08_single-relationer.tmpl": {Func: bindataTemplates08singlerelationertmpl, Children: map[string]*bintree{}},
		"09_multi-relationer.tmpl": {Func: bindataTemplates09multirelationertmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
