// Code generated by mockery v1.0.0
package jsonapi

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: scope
func (_m *MockRepository) Create(scope *Scope) error {
	ret := _m.Called(scope)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Scope) error); ok {
		r0 = rf(scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(error)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: scope
func (_m *MockRepository) Delete(scope *Scope) error {
	ret := _m.Called(scope)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Scope) error); ok {
		r0 = rf(scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(error)
		}
	}

	return r0
}

// Get provides a mock function with given fields: scope
func (_m *MockRepository) Get(scope *Scope) error {
	ret := _m.Called(scope)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Scope) error); ok {
		r0 = rf(scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(error)
		}
	}

	return r0
}

// List provides a mock function with given fields: scope
func (_m *MockRepository) List(scope *Scope) error {
	ret := _m.Called(scope)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Scope) error); ok {
		r0 = rf(scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(error)
		}
	}

	return r0
}

// Patch provides a mock function with given fields: scope
func (_m *MockRepository) Patch(scope *Scope) error {
	ret := _m.Called(scope)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Scope) error); ok {
		r0 = rf(scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(error)
		}
	}

	return r0
}
